{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\Camunda\\\\rpsboacamundajul2022\\\\Camunda-Reactjs\\\\src\\\\components\\\\DeployProcess.js\";\nimport React, { Component } from 'react';\nimport { deployProcess } from '../actions';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Form, Button } from 'semantic-ui-react';\nimport FileReaderInput from 'react-file-reader-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DeployProcess extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleChange = (e, results) => {\n      results.forEach(result => {\n        const [e, file] = result;\n        this.uploadFile(file.name, e.target.result);\n      });\n    };\n  }\n\n  uploadFile(filename, file) {\n    this.props.deployProcess(filename, file);\n  }\n\n  render() {\n    if (!this.props.processDeployment) {\n      return /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(FileReaderInput, {\n          as: \"binary\",\n          id: \"my-file-input\",\n          onChange: this.handleChange,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            children: \"Select a BPMN file that you want to deploy to the Engine!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Successfully uploaded bpmn file to engine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const params = ownProps.match.params;\n  return { ...params,\n    ...state.entities\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  deployProcess\n})(DeployProcess));","map":{"version":3,"names":["React","Component","deployProcess","connect","withRouter","Form","Button","FileReaderInput","DeployProcess","handleChange","e","results","forEach","result","file","uploadFile","name","target","filename","props","render","processDeployment","mapStateToProps","state","ownProps","params","match","entities"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/src/components/DeployProcess.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { deployProcess } from '../actions'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { Form, Button } from 'semantic-ui-react'\r\nimport FileReaderInput from 'react-file-reader-input'\r\n\r\nclass DeployProcess extends Component {\r\n  handleChange = (e, results) => {\r\n    results.forEach(result => {\r\n      const [e, file] = result\r\n      this.uploadFile(file.name, e.target.result)\r\n    });\r\n  }\r\n\r\n  uploadFile(filename, file) {\r\n    this.props.deployProcess(filename, file)\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.processDeployment) {\r\n      return (\r\n        <Form>\r\n          <FileReaderInput as=\"binary\" id=\"my-file-input\" onChange={this.handleChange}>\r\n            <Button primary>Select a BPMN file that you want to deploy to the Engine!</Button>\r\n          </FileReaderInput>\r\n        </Form>\r\n      )\r\n    } else {\r\n      return (\r\n        <p>Successfully uploaded bpmn file to engine</p>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const params = ownProps.match.params\r\n  return {\r\n    ...params,\r\n    ...state.entities\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n  deployProcess\r\n})(DeployProcess))\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,QAA8B,YAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,mBAA7B;AACA,OAAOC,eAAP,MAA4B,yBAA5B;;;AAEA,MAAMC,aAAN,SAA4BP,SAA5B,CAAsC;EAAA;IAAA;;IAAA,KACpCQ,YADoC,GACrB,CAACC,CAAD,EAAIC,OAAJ,KAAgB;MAC7BA,OAAO,CAACC,OAAR,CAAgBC,MAAM,IAAI;QACxB,MAAM,CAACH,CAAD,EAAII,IAAJ,IAAYD,MAAlB;QACA,KAAKE,UAAL,CAAgBD,IAAI,CAACE,IAArB,EAA2BN,CAAC,CAACO,MAAF,CAASJ,MAApC;MACD,CAHD;IAID,CANmC;EAAA;;EAQpCE,UAAU,CAACG,QAAD,EAAWJ,IAAX,EAAiB;IACzB,KAAKK,KAAL,CAAWjB,aAAX,CAAyBgB,QAAzB,EAAmCJ,IAAnC;EACD;;EAEDM,MAAM,GAAG;IACP,IAAI,CAAC,KAAKD,KAAL,CAAWE,iBAAhB,EAAmC;MACjC,oBACE,QAAC,IAAD;QAAA,uBACE,QAAC,eAAD;UAAiB,EAAE,EAAC,QAApB;UAA6B,EAAE,EAAC,eAAhC;UAAgD,QAAQ,EAAE,KAAKZ,YAA/D;UAAA,uBACE,QAAC,MAAD;YAAQ,OAAO,MAAf;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF;IAOD,CARD,MAQO;MACL,oBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF;IAGD;EACF;;AA1BmC;;AA6BtC,MAAMa,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;EAC3C,MAAMC,MAAM,GAAGD,QAAQ,CAACE,KAAT,CAAeD,MAA9B;EACA,OAAO,EACL,GAAGA,MADE;IAEL,GAAGF,KAAK,CAACI;EAFJ,CAAP;AAID,CAND;;AAQA,eAAevB,UAAU,CAACD,OAAO,CAACmB,eAAD,EAAkB;EACjDpB;AADiD,CAAlB,CAAP,CAEvBM,aAFuB,CAAD,CAAzB"},"metadata":{},"sourceType":"module"}