{"ast":null,"code":"var ELEMENT_ID = 'data-element-id';\nimport { attr as svgAttr } from 'tiny-svg';\n/**\n * @class\n *\n * A registry that keeps track of all shapes in the diagram.\n */\n\nexport default function ElementRegistry(eventBus) {\n  this._elements = {};\n  this._eventBus = eventBus;\n}\nElementRegistry.$inject = ['eventBus'];\n/**\n * Register a pair of (element, gfx, (secondaryGfx)).\n *\n * @param {djs.model.Base} element\n * @param {SVGElement} gfx\n * @param {SVGElement} [secondaryGfx] optional other element to register, too\n */\n\nElementRegistry.prototype.add = function (element, gfx, secondaryGfx) {\n  var id = element.id;\n\n  this._validateId(id); // associate dom node with element\n\n\n  svgAttr(gfx, ELEMENT_ID, id);\n\n  if (secondaryGfx) {\n    svgAttr(secondaryGfx, ELEMENT_ID, id);\n  }\n\n  this._elements[id] = {\n    element: element,\n    gfx: gfx,\n    secondaryGfx: secondaryGfx\n  };\n};\n/**\n * Removes an element from the registry.\n *\n * @param {djs.model.Base} element\n */\n\n\nElementRegistry.prototype.remove = function (element) {\n  var elements = this._elements,\n      id = element.id || element,\n      container = id && elements[id];\n\n  if (container) {\n    // unset element id on gfx\n    svgAttr(container.gfx, ELEMENT_ID, '');\n\n    if (container.secondaryGfx) {\n      svgAttr(container.secondaryGfx, ELEMENT_ID, '');\n    }\n\n    delete elements[id];\n  }\n};\n/**\n * Update the id of an element\n *\n * @param {djs.model.Base} element\n * @param {string} newId\n */\n\n\nElementRegistry.prototype.updateId = function (element, newId) {\n  this._validateId(newId);\n\n  if (typeof element === 'string') {\n    element = this.get(element);\n  }\n\n  this._eventBus.fire('element.updateId', {\n    element: element,\n    newId: newId\n  });\n\n  var gfx = this.getGraphics(element),\n      secondaryGfx = this.getGraphics(element, true);\n  this.remove(element);\n  element.id = newId;\n  this.add(element, gfx, secondaryGfx);\n};\n/**\n * Update the graphics of an element\n *\n * @param {djs.model.Base} element\n * @param {SVGElement} gfx\n * @param {boolean} [secondary=false] whether to update the secondary connected element\n */\n\n\nElementRegistry.prototype.updateGraphics = function (filter, gfx, secondary) {\n  var id = filter.id || filter;\n  var container = this._elements[id];\n\n  if (secondary) {\n    container.secondaryGfx = gfx;\n  } else {\n    container.gfx = gfx;\n  }\n\n  svgAttr(gfx, ELEMENT_ID, id);\n  return gfx;\n};\n/**\n * Return the model element for a given id or graphics.\n *\n * @example\n *\n * elementRegistry.get('SomeElementId_1');\n * elementRegistry.get(gfx);\n *\n *\n * @param {string|SVGElement} filter for selecting the element\n *\n * @return {djs.model.Base}\n */\n\n\nElementRegistry.prototype.get = function (filter) {\n  var id;\n\n  if (typeof filter === 'string') {\n    id = filter;\n  } else {\n    id = filter && svgAttr(filter, ELEMENT_ID);\n  }\n\n  var container = this._elements[id];\n  return container && container.element;\n};\n/**\n * Return all elements that match a given filter function.\n *\n * @param {Function} fn\n *\n * @return {Array<djs.model.Base>}\n */\n\n\nElementRegistry.prototype.filter = function (fn) {\n  var filtered = [];\n  this.forEach(function (element, gfx) {\n    if (fn(element, gfx)) {\n      filtered.push(element);\n    }\n  });\n  return filtered;\n};\n/**\n * Return the first element that satisfies the provided testing function.\n *\n * @param {Function} fn\n *\n * @return {djs.model.Base}\n */\n\n\nElementRegistry.prototype.find = function (fn) {\n  var map = this._elements,\n      keys = Object.keys(map);\n\n  for (var i = 0; i < keys.length; i++) {\n    var id = keys[i],\n        container = map[id],\n        element = container.element,\n        gfx = container.gfx;\n\n    if (fn(element, gfx)) {\n      return element;\n    }\n  }\n};\n/**\n * Return all rendered model elements.\n *\n * @return {Array<djs.model.Base>}\n */\n\n\nElementRegistry.prototype.getAll = function () {\n  return this.filter(function (e) {\n    return e;\n  });\n};\n/**\n * Iterate over all diagram elements.\n *\n * @param {Function} fn\n */\n\n\nElementRegistry.prototype.forEach = function (fn) {\n  var map = this._elements;\n  Object.keys(map).forEach(function (id) {\n    var container = map[id],\n        element = container.element,\n        gfx = container.gfx;\n    return fn(element, gfx);\n  });\n};\n/**\n * Return the graphical representation of an element or its id.\n *\n * @example\n * elementRegistry.getGraphics('SomeElementId_1');\n * elementRegistry.getGraphics(rootElement); // <g ...>\n *\n * elementRegistry.getGraphics(rootElement, true); // <svg ...>\n *\n *\n * @param {string|djs.model.Base} filter\n * @param {boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\n\n\nElementRegistry.prototype.getGraphics = function (filter, secondary) {\n  var id = filter.id || filter;\n  var container = this._elements[id];\n  return container && (secondary ? container.secondaryGfx : container.gfx);\n};\n/**\n * Validate the suitability of the given id and signals a problem\n * with an exception.\n *\n * @param {string} id\n *\n * @throws {Error} if id is empty or already assigned\n */\n\n\nElementRegistry.prototype._validateId = function (id) {\n  if (!id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elements[id]) {\n    throw new Error('element with id ' + id + ' already added');\n  }\n};","map":{"version":3,"names":["ELEMENT_ID","attr","svgAttr","ElementRegistry","eventBus","_elements","_eventBus","$inject","prototype","add","element","gfx","secondaryGfx","id","_validateId","remove","elements","container","updateId","newId","get","fire","getGraphics","updateGraphics","filter","secondary","fn","filtered","forEach","push","find","map","keys","Object","i","length","getAll","e","Error"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/node_modules/diagram-js/lib/core/ElementRegistry.js"],"sourcesContent":["var ELEMENT_ID = 'data-element-id';\n\nimport { attr as svgAttr } from 'tiny-svg';\n\n\n/**\n * @class\n *\n * A registry that keeps track of all shapes in the diagram.\n */\nexport default function ElementRegistry(eventBus) {\n  this._elements = {};\n\n  this._eventBus = eventBus;\n}\n\nElementRegistry.$inject = [ 'eventBus' ];\n\n/**\n * Register a pair of (element, gfx, (secondaryGfx)).\n *\n * @param {djs.model.Base} element\n * @param {SVGElement} gfx\n * @param {SVGElement} [secondaryGfx] optional other element to register, too\n */\nElementRegistry.prototype.add = function(element, gfx, secondaryGfx) {\n\n  var id = element.id;\n\n  this._validateId(id);\n\n  // associate dom node with element\n  svgAttr(gfx, ELEMENT_ID, id);\n\n  if (secondaryGfx) {\n    svgAttr(secondaryGfx, ELEMENT_ID, id);\n  }\n\n  this._elements[id] = { element: element, gfx: gfx, secondaryGfx: secondaryGfx };\n};\n\n/**\n * Removes an element from the registry.\n *\n * @param {djs.model.Base} element\n */\nElementRegistry.prototype.remove = function(element) {\n  var elements = this._elements,\n      id = element.id || element,\n      container = id && elements[id];\n\n  if (container) {\n\n    // unset element id on gfx\n    svgAttr(container.gfx, ELEMENT_ID, '');\n\n    if (container.secondaryGfx) {\n      svgAttr(container.secondaryGfx, ELEMENT_ID, '');\n    }\n\n    delete elements[id];\n  }\n};\n\n/**\n * Update the id of an element\n *\n * @param {djs.model.Base} element\n * @param {string} newId\n */\nElementRegistry.prototype.updateId = function(element, newId) {\n\n  this._validateId(newId);\n\n  if (typeof element === 'string') {\n    element = this.get(element);\n  }\n\n  this._eventBus.fire('element.updateId', {\n    element: element,\n    newId: newId\n  });\n\n  var gfx = this.getGraphics(element),\n      secondaryGfx = this.getGraphics(element, true);\n\n  this.remove(element);\n\n  element.id = newId;\n\n  this.add(element, gfx, secondaryGfx);\n};\n\n/**\n * Update the graphics of an element\n *\n * @param {djs.model.Base} element\n * @param {SVGElement} gfx\n * @param {boolean} [secondary=false] whether to update the secondary connected element\n */\nElementRegistry.prototype.updateGraphics = function(filter, gfx, secondary) {\n  var id = filter.id || filter;\n\n  var container = this._elements[id];\n\n  if (secondary) {\n    container.secondaryGfx = gfx;\n  } else {\n    container.gfx = gfx;\n  }\n\n  svgAttr(gfx, ELEMENT_ID, id);\n\n  return gfx;\n};\n\n/**\n * Return the model element for a given id or graphics.\n *\n * @example\n *\n * elementRegistry.get('SomeElementId_1');\n * elementRegistry.get(gfx);\n *\n *\n * @param {string|SVGElement} filter for selecting the element\n *\n * @return {djs.model.Base}\n */\nElementRegistry.prototype.get = function(filter) {\n  var id;\n\n  if (typeof filter === 'string') {\n    id = filter;\n  } else {\n    id = filter && svgAttr(filter, ELEMENT_ID);\n  }\n\n  var container = this._elements[id];\n  return container && container.element;\n};\n\n/**\n * Return all elements that match a given filter function.\n *\n * @param {Function} fn\n *\n * @return {Array<djs.model.Base>}\n */\nElementRegistry.prototype.filter = function(fn) {\n\n  var filtered = [];\n\n  this.forEach(function(element, gfx) {\n    if (fn(element, gfx)) {\n      filtered.push(element);\n    }\n  });\n\n  return filtered;\n};\n\n/**\n * Return the first element that satisfies the provided testing function.\n *\n * @param {Function} fn\n *\n * @return {djs.model.Base}\n */\nElementRegistry.prototype.find = function(fn) {\n  var map = this._elements,\n      keys = Object.keys(map);\n\n  for (var i = 0; i < keys.length; i++) {\n    var id = keys[i],\n        container = map[id],\n        element = container.element,\n        gfx = container.gfx;\n\n    if (fn(element, gfx)) {\n      return element;\n    }\n  }\n};\n\n/**\n * Return all rendered model elements.\n *\n * @return {Array<djs.model.Base>}\n */\nElementRegistry.prototype.getAll = function() {\n  return this.filter(function(e) { return e; });\n};\n\n/**\n * Iterate over all diagram elements.\n *\n * @param {Function} fn\n */\nElementRegistry.prototype.forEach = function(fn) {\n\n  var map = this._elements;\n\n  Object.keys(map).forEach(function(id) {\n    var container = map[id],\n        element = container.element,\n        gfx = container.gfx;\n\n    return fn(element, gfx);\n  });\n};\n\n/**\n * Return the graphical representation of an element or its id.\n *\n * @example\n * elementRegistry.getGraphics('SomeElementId_1');\n * elementRegistry.getGraphics(rootElement); // <g ...>\n *\n * elementRegistry.getGraphics(rootElement, true); // <svg ...>\n *\n *\n * @param {string|djs.model.Base} filter\n * @param {boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\nElementRegistry.prototype.getGraphics = function(filter, secondary) {\n  var id = filter.id || filter;\n\n  var container = this._elements[id];\n  return container && (secondary ? container.secondaryGfx : container.gfx);\n};\n\n/**\n * Validate the suitability of the given id and signals a problem\n * with an exception.\n *\n * @param {string} id\n *\n * @throws {Error} if id is empty or already assigned\n */\nElementRegistry.prototype._validateId = function(id) {\n  if (!id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elements[id]) {\n    throw new Error('element with id ' + id + ' already added');\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}