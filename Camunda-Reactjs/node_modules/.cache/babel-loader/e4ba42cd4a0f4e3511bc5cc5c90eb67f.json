{"ast":null,"code":"import { Injector } from 'didi';\nimport CoreModule from './core';\n/**\n * Bootstrap an injector from a list of modules, instantiating a number of default components\n *\n * @ignore\n * @param {Array<didi.Module>} bootstrapModules\n *\n * @return {didi.Injector} a injector to use to access the components\n */\n\nfunction bootstrap(bootstrapModules) {\n  var modules = [],\n      components = [];\n\n  function hasModule(m) {\n    return modules.indexOf(m) >= 0;\n  }\n\n  function addModule(m) {\n    modules.push(m);\n  }\n\n  function visit(m) {\n    if (hasModule(m)) {\n      return;\n    }\n\n    (m.__depends__ || []).forEach(visit);\n\n    if (hasModule(m)) {\n      return;\n    }\n\n    addModule(m);\n    (m.__init__ || []).forEach(function (c) {\n      components.push(c);\n    });\n  }\n\n  bootstrapModules.forEach(visit);\n  var injector = new Injector(modules);\n  components.forEach(function (c) {\n    try {\n      // eagerly resolve component (fn or string)\n      injector[typeof c === 'string' ? 'get' : 'invoke'](c);\n    } catch (e) {\n      console.error('Failed to instantiate component');\n      console.error(e.stack);\n      throw e;\n    }\n  });\n  return injector;\n}\n/**\n * Creates an injector from passed options.\n *\n * @ignore\n * @param  {Object} options\n * @return {didi.Injector}\n */\n\n\nfunction createInjector(options) {\n  options = options || {};\n  var configModule = {\n    'config': ['value', options]\n  };\n  var modules = [configModule, CoreModule].concat(options.modules || []);\n  return bootstrap(modules);\n}\n/**\n * The main diagram-js entry point that bootstraps the diagram with the given\n * configuration.\n *\n * To register extensions with the diagram, pass them as Array<didi.Module> to the constructor.\n *\n * @class djs.Diagram\n * @memberOf djs\n * @constructor\n *\n * @example\n *\n * <caption>Creating a plug-in that logs whenever a shape is added to the canvas.</caption>\n *\n * // plug-in implemenentation\n * function MyLoggingPlugin(eventBus) {\n *   eventBus.on('shape.added', function(event) {\n *     console.log('shape ', event.shape, ' was added to the diagram');\n *   });\n * }\n *\n * // export as module\n * export default {\n *   __init__: [ 'myLoggingPlugin' ],\n *     myLoggingPlugin: [ 'type', MyLoggingPlugin ]\n * };\n *\n *\n * // instantiate the diagram with the new plug-in\n *\n * import MyLoggingModule from 'path-to-my-logging-plugin';\n *\n * var diagram = new Diagram({\n *   modules: [\n *     MyLoggingModule\n *   ]\n * });\n *\n * diagram.invoke([ 'canvas', function(canvas) {\n *   // add shape to drawing canvas\n *   canvas.addShape({ x: 10, y: 10 });\n * });\n *\n * // 'shape ... was added to the diagram' logged to console\n *\n * @param {Object} options\n * @param {Array<didi.Module>} [options.modules] external modules to instantiate with the diagram\n * @param {didi.Injector} [injector] an (optional) injector to bootstrap the diagram with\n */\n\n\nexport default function Diagram(options, injector) {\n  // create injector unless explicitly specified\n  this.injector = injector = injector || createInjector(options); // API\n\n  /**\n   * Resolves a diagram service\n   *\n   * @method Diagram#get\n   *\n   * @param {string} name the name of the diagram service to be retrieved\n   * @param {boolean} [strict=true] if false, resolve missing services to null\n   */\n\n  this.get = injector.get;\n  /**\n   * Executes a function into which diagram services are injected\n   *\n   * @method Diagram#invoke\n   *\n   * @param {Function|Object[]} fn the function to resolve\n   * @param {Object} locals a number of locals to use to resolve certain dependencies\n   */\n\n  this.invoke = injector.invoke; // init\n  // indicate via event\n\n  /**\n   * An event indicating that all plug-ins are loaded.\n   *\n   * Use this event to fire other events to interested plug-ins\n   *\n   * @memberOf Diagram\n   *\n   * @event diagram.init\n   *\n   * @example\n   *\n   * eventBus.on('diagram.init', function() {\n   *   eventBus.fire('my-custom-event', { foo: 'BAR' });\n   * });\n   *\n   * @type {Object}\n   */\n\n  this.get('eventBus').fire('diagram.init');\n}\n/**\n * Destroys the diagram\n *\n * @method  Diagram#destroy\n */\n\nDiagram.prototype.destroy = function () {\n  this.get('eventBus').fire('diagram.destroy');\n};\n/**\n * Clear the diagram, removing all contents.\n */\n\n\nDiagram.prototype.clear = function () {\n  this.get('eventBus').fire('diagram.clear');\n};","map":{"version":3,"names":["Injector","CoreModule","bootstrap","bootstrapModules","modules","components","hasModule","m","indexOf","addModule","push","visit","__depends__","forEach","__init__","c","injector","e","console","error","stack","createInjector","options","configModule","concat","Diagram","get","invoke","fire","prototype","destroy","clear"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/node_modules/diagram-js/lib/Diagram.js"],"sourcesContent":["import { Injector } from 'didi';\n\nimport CoreModule from './core';\n\n\n/**\n * Bootstrap an injector from a list of modules, instantiating a number of default components\n *\n * @ignore\n * @param {Array<didi.Module>} bootstrapModules\n *\n * @return {didi.Injector} a injector to use to access the components\n */\nfunction bootstrap(bootstrapModules) {\n\n  var modules = [],\n      components = [];\n\n  function hasModule(m) {\n    return modules.indexOf(m) >= 0;\n  }\n\n  function addModule(m) {\n    modules.push(m);\n  }\n\n  function visit(m) {\n    if (hasModule(m)) {\n      return;\n    }\n\n    (m.__depends__ || []).forEach(visit);\n\n    if (hasModule(m)) {\n      return;\n    }\n\n    addModule(m);\n\n    (m.__init__ || []).forEach(function(c) {\n      components.push(c);\n    });\n  }\n\n  bootstrapModules.forEach(visit);\n\n  var injector = new Injector(modules);\n\n  components.forEach(function(c) {\n\n    try {\n\n      // eagerly resolve component (fn or string)\n      injector[typeof c === 'string' ? 'get' : 'invoke'](c);\n    } catch (e) {\n      console.error('Failed to instantiate component');\n      console.error(e.stack);\n\n      throw e;\n    }\n  });\n\n  return injector;\n}\n\n/**\n * Creates an injector from passed options.\n *\n * @ignore\n * @param  {Object} options\n * @return {didi.Injector}\n */\nfunction createInjector(options) {\n\n  options = options || {};\n\n  var configModule = {\n    'config': ['value', options]\n  };\n\n  var modules = [ configModule, CoreModule ].concat(options.modules || []);\n\n  return bootstrap(modules);\n}\n\n\n/**\n * The main diagram-js entry point that bootstraps the diagram with the given\n * configuration.\n *\n * To register extensions with the diagram, pass them as Array<didi.Module> to the constructor.\n *\n * @class djs.Diagram\n * @memberOf djs\n * @constructor\n *\n * @example\n *\n * <caption>Creating a plug-in that logs whenever a shape is added to the canvas.</caption>\n *\n * // plug-in implemenentation\n * function MyLoggingPlugin(eventBus) {\n *   eventBus.on('shape.added', function(event) {\n *     console.log('shape ', event.shape, ' was added to the diagram');\n *   });\n * }\n *\n * // export as module\n * export default {\n *   __init__: [ 'myLoggingPlugin' ],\n *     myLoggingPlugin: [ 'type', MyLoggingPlugin ]\n * };\n *\n *\n * // instantiate the diagram with the new plug-in\n *\n * import MyLoggingModule from 'path-to-my-logging-plugin';\n *\n * var diagram = new Diagram({\n *   modules: [\n *     MyLoggingModule\n *   ]\n * });\n *\n * diagram.invoke([ 'canvas', function(canvas) {\n *   // add shape to drawing canvas\n *   canvas.addShape({ x: 10, y: 10 });\n * });\n *\n * // 'shape ... was added to the diagram' logged to console\n *\n * @param {Object} options\n * @param {Array<didi.Module>} [options.modules] external modules to instantiate with the diagram\n * @param {didi.Injector} [injector] an (optional) injector to bootstrap the diagram with\n */\nexport default function Diagram(options, injector) {\n\n  // create injector unless explicitly specified\n  this.injector = injector = injector || createInjector(options);\n\n  // API\n\n  /**\n   * Resolves a diagram service\n   *\n   * @method Diagram#get\n   *\n   * @param {string} name the name of the diagram service to be retrieved\n   * @param {boolean} [strict=true] if false, resolve missing services to null\n   */\n  this.get = injector.get;\n\n  /**\n   * Executes a function into which diagram services are injected\n   *\n   * @method Diagram#invoke\n   *\n   * @param {Function|Object[]} fn the function to resolve\n   * @param {Object} locals a number of locals to use to resolve certain dependencies\n   */\n  this.invoke = injector.invoke;\n\n  // init\n\n  // indicate via event\n\n\n  /**\n   * An event indicating that all plug-ins are loaded.\n   *\n   * Use this event to fire other events to interested plug-ins\n   *\n   * @memberOf Diagram\n   *\n   * @event diagram.init\n   *\n   * @example\n   *\n   * eventBus.on('diagram.init', function() {\n   *   eventBus.fire('my-custom-event', { foo: 'BAR' });\n   * });\n   *\n   * @type {Object}\n   */\n  this.get('eventBus').fire('diagram.init');\n}\n\n\n/**\n * Destroys the diagram\n *\n * @method  Diagram#destroy\n */\nDiagram.prototype.destroy = function() {\n  this.get('eventBus').fire('diagram.destroy');\n};\n\n/**\n * Clear the diagram, removing all contents.\n */\nDiagram.prototype.clear = function() {\n  this.get('eventBus').fire('diagram.clear');\n};\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,MAAzB;AAEA,OAAOC,UAAP,MAAuB,QAAvB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,gBAAnB,EAAqC;EAEnC,IAAIC,OAAO,GAAG,EAAd;EAAA,IACIC,UAAU,GAAG,EADjB;;EAGA,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;IACpB,OAAOH,OAAO,CAACI,OAAR,CAAgBD,CAAhB,KAAsB,CAA7B;EACD;;EAED,SAASE,SAAT,CAAmBF,CAAnB,EAAsB;IACpBH,OAAO,CAACM,IAAR,CAAaH,CAAb;EACD;;EAED,SAASI,KAAT,CAAeJ,CAAf,EAAkB;IAChB,IAAID,SAAS,CAACC,CAAD,CAAb,EAAkB;MAChB;IACD;;IAED,CAACA,CAAC,CAACK,WAAF,IAAiB,EAAlB,EAAsBC,OAAtB,CAA8BF,KAA9B;;IAEA,IAAIL,SAAS,CAACC,CAAD,CAAb,EAAkB;MAChB;IACD;;IAEDE,SAAS,CAACF,CAAD,CAAT;IAEA,CAACA,CAAC,CAACO,QAAF,IAAc,EAAf,EAAmBD,OAAnB,CAA2B,UAASE,CAAT,EAAY;MACrCV,UAAU,CAACK,IAAX,CAAgBK,CAAhB;IACD,CAFD;EAGD;;EAEDZ,gBAAgB,CAACU,OAAjB,CAAyBF,KAAzB;EAEA,IAAIK,QAAQ,GAAG,IAAIhB,QAAJ,CAAaI,OAAb,CAAf;EAEAC,UAAU,CAACQ,OAAX,CAAmB,UAASE,CAAT,EAAY;IAE7B,IAAI;MAEF;MACAC,QAAQ,CAAC,OAAOD,CAAP,KAAa,QAAb,GAAwB,KAAxB,GAAgC,QAAjC,CAAR,CAAmDA,CAAnD;IACD,CAJD,CAIE,OAAOE,CAAP,EAAU;MACVC,OAAO,CAACC,KAAR,CAAc,iCAAd;MACAD,OAAO,CAACC,KAAR,CAAcF,CAAC,CAACG,KAAhB;MAEA,MAAMH,CAAN;IACD;EACF,CAZD;EAcA,OAAOD,QAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,cAAT,CAAwBC,OAAxB,EAAiC;EAE/BA,OAAO,GAAGA,OAAO,IAAI,EAArB;EAEA,IAAIC,YAAY,GAAG;IACjB,UAAU,CAAC,OAAD,EAAUD,OAAV;EADO,CAAnB;EAIA,IAAIlB,OAAO,GAAG,CAAEmB,YAAF,EAAgBtB,UAAhB,EAA6BuB,MAA7B,CAAoCF,OAAO,CAAClB,OAAR,IAAmB,EAAvD,CAAd;EAEA,OAAOF,SAAS,CAACE,OAAD,CAAhB;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASqB,OAAT,CAAiBH,OAAjB,EAA0BN,QAA1B,EAAoC;EAEjD;EACA,KAAKA,QAAL,GAAgBA,QAAQ,GAAGA,QAAQ,IAAIK,cAAc,CAACC,OAAD,CAArD,CAHiD,CAKjD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,KAAKI,GAAL,GAAWV,QAAQ,CAACU,GAApB;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,KAAKC,MAAL,GAAcX,QAAQ,CAACW,MAAvB,CAzBiD,CA2BjD;EAEA;;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,KAAKD,GAAL,CAAS,UAAT,EAAqBE,IAArB,CAA0B,cAA1B;AACD;AAGD;AACA;AACA;AACA;AACA;;AACAH,OAAO,CAACI,SAAR,CAAkBC,OAAlB,GAA4B,YAAW;EACrC,KAAKJ,GAAL,CAAS,UAAT,EAAqBE,IAArB,CAA0B,iBAA1B;AACD,CAFD;AAIA;AACA;AACA;;;AACAH,OAAO,CAACI,SAAR,CAAkBE,KAAlB,GAA0B,YAAW;EACnC,KAAKL,GAAL,CAAS,UAAT,EAAqBE,IAArB,CAA0B,eAA1B;AACD,CAFD"},"metadata":{},"sourceType":"module"}