{"ast":null,"code":"import * as ActionTypes from '../constants/ActionTypes';\nimport merge from 'lodash/merge';\nimport { combineReducers } from 'redux';\nimport { reducer as reduxFormReducer } from 'redux-form'; // Updates an entity cache in response to any action with response.entities.\n\nconst entities = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type\n  } = action;\n\n  if (type === ActionTypes.TASK_SUBMITTED_SUCCESS || type === ActionTypes.TASK_SUBMITTED_FAILURE) {\n    return merge({}, state, {\n      redirect: '/tasklist'\n    });\n  } else {\n    state = merge({}, state, {\n      redirect: null\n    });\n  }\n\n  if (type === ActionTypes.NEW_PROCESS_INSTANCE_SUCCESS) {\n    state.formKey = null;\n  }\n\n  if (type === ActionTypes.FORM_KEY_SUCCESS) {\n    state.processInstanceStarted = null;\n  }\n\n  if (type === ActionTypes.TASKS_SUCCESS) {\n    state.task = null;\n  }\n\n  if (action.response && action.response.entities) {\n    return merge({}, state, action.response.entities);\n  }\n\n  return state;\n};\n\nconst rootReducer = combineReducers({\n  form: reduxFormReducer,\n  entities\n});\nexport default rootReducer;","map":{"version":3,"names":["ActionTypes","merge","combineReducers","reducer","reduxFormReducer","entities","state","action","type","TASK_SUBMITTED_SUCCESS","TASK_SUBMITTED_FAILURE","redirect","NEW_PROCESS_INSTANCE_SUCCESS","formKey","FORM_KEY_SUCCESS","processInstanceStarted","TASKS_SUCCESS","task","response","rootReducer","form"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/src/reducers/index.js"],"sourcesContent":["import * as ActionTypes from '../constants/ActionTypes'\r\nimport merge from 'lodash/merge'\r\nimport { combineReducers } from 'redux'\r\nimport { reducer as reduxFormReducer } from 'redux-form'\r\n\r\n// Updates an entity cache in response to any action with response.entities.\r\nconst entities = (state = {}, action) => {\r\n  const { type } = action\r\n  if (type === ActionTypes.TASK_SUBMITTED_SUCCESS || type === ActionTypes.TASK_SUBMITTED_FAILURE) {\r\n    return merge({}, state, {\r\n      redirect: '/tasklist'\r\n    })\r\n  } else {\r\n    state = merge({}, state, {\r\n      redirect: null\r\n    })\r\n  }\r\n  if (type === ActionTypes.NEW_PROCESS_INSTANCE_SUCCESS) {\r\n    state.formKey = null\r\n  }\r\n  if (type === ActionTypes.FORM_KEY_SUCCESS) {\r\n    state.processInstanceStarted = null\r\n  }\r\n  if (type === ActionTypes.TASKS_SUCCESS) {\r\n    state.task = null\r\n  }\r\n\r\n  if (action.response && action.response.entities) {\r\n    return merge({}, state, action.response.entities)\r\n  }\r\n  return state\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  form: reduxFormReducer,\r\n  entities\r\n})\r\n\r\nexport default rootReducer\r\n"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,0BAA7B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,OAAO,IAAIC,gBAApB,QAA4C,YAA5C,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,YAAwB;EAAA,IAAvBC,KAAuB,uEAAf,EAAe;EAAA,IAAXC,MAAW;EACvC,MAAM;IAAEC;EAAF,IAAWD,MAAjB;;EACA,IAAIC,IAAI,KAAKR,WAAW,CAACS,sBAArB,IAA+CD,IAAI,KAAKR,WAAW,CAACU,sBAAxE,EAAgG;IAC9F,OAAOT,KAAK,CAAC,EAAD,EAAKK,KAAL,EAAY;MACtBK,QAAQ,EAAE;IADY,CAAZ,CAAZ;EAGD,CAJD,MAIO;IACLL,KAAK,GAAGL,KAAK,CAAC,EAAD,EAAKK,KAAL,EAAY;MACvBK,QAAQ,EAAE;IADa,CAAZ,CAAb;EAGD;;EACD,IAAIH,IAAI,KAAKR,WAAW,CAACY,4BAAzB,EAAuD;IACrDN,KAAK,CAACO,OAAN,GAAgB,IAAhB;EACD;;EACD,IAAIL,IAAI,KAAKR,WAAW,CAACc,gBAAzB,EAA2C;IACzCR,KAAK,CAACS,sBAAN,GAA+B,IAA/B;EACD;;EACD,IAAIP,IAAI,KAAKR,WAAW,CAACgB,aAAzB,EAAwC;IACtCV,KAAK,CAACW,IAAN,GAAa,IAAb;EACD;;EAED,IAAIV,MAAM,CAACW,QAAP,IAAmBX,MAAM,CAACW,QAAP,CAAgBb,QAAvC,EAAiD;IAC/C,OAAOJ,KAAK,CAAC,EAAD,EAAKK,KAAL,EAAYC,MAAM,CAACW,QAAP,CAAgBb,QAA5B,CAAZ;EACD;;EACD,OAAOC,KAAP;AACD,CAzBD;;AA2BA,MAAMa,WAAW,GAAGjB,eAAe,CAAC;EAClCkB,IAAI,EAAEhB,gBAD4B;EAElCC;AAFkC,CAAD,CAAnC;AAKA,eAAec,WAAf"},"metadata":{},"sourceType":"module"}