{"ast":null,"code":"var DEFAULT_RENDER_PRIORITY = 1000;\n/**\n * The base implementation of shape and connection renderers.\n *\n * @param {EventBus} eventBus\n * @param {number} [renderPriority=1000]\n */\n\nexport default function BaseRenderer(eventBus, renderPriority) {\n  var self = this;\n  renderPriority = renderPriority || DEFAULT_RENDER_PRIORITY;\n  eventBus.on(['render.shape', 'render.connection'], renderPriority, function (evt, context) {\n    var type = evt.type,\n        element = context.element,\n        visuals = context.gfx,\n        attrs = context.attrs;\n\n    if (self.canRender(element)) {\n      if (type === 'render.shape') {\n        return self.drawShape(visuals, element, attrs);\n      } else {\n        return self.drawConnection(visuals, element, attrs);\n      }\n    }\n  });\n  eventBus.on(['render.getShapePath', 'render.getConnectionPath'], renderPriority, function (evt, element) {\n    if (self.canRender(element)) {\n      if (evt.type === 'render.getShapePath') {\n        return self.getShapePath(element);\n      } else {\n        return self.getConnectionPath(element);\n      }\n    }\n  });\n}\n/**\n * Should check whether *this* renderer can render\n * the element/connection.\n *\n * @param {element} element\n *\n * @returns {boolean}\n */\n\nBaseRenderer.prototype.canRender = function () {};\n/**\n * Provides the shape's snap svg element to be drawn on the `canvas`.\n *\n * @param {djs.Graphics} visuals\n * @param {Shape} shape\n *\n * @returns {Snap.svg} [returns a Snap.svg paper element ]\n */\n\n\nBaseRenderer.prototype.drawShape = function () {};\n/**\n * Provides the shape's snap svg element to be drawn on the `canvas`.\n *\n * @param {djs.Graphics} visuals\n * @param {Connection} connection\n *\n * @returns {Snap.svg} [returns a Snap.svg paper element ]\n */\n\n\nBaseRenderer.prototype.drawConnection = function () {};\n/**\n * Gets the SVG path of a shape that represents it's visual bounds.\n *\n * @param {Shape} shape\n *\n * @return {string} svg path\n */\n\n\nBaseRenderer.prototype.getShapePath = function () {};\n/**\n * Gets the SVG path of a connection that represents it's visual bounds.\n *\n * @param {Connection} connection\n *\n * @return {string} svg path\n */\n\n\nBaseRenderer.prototype.getConnectionPath = function () {};","map":{"version":3,"names":["DEFAULT_RENDER_PRIORITY","BaseRenderer","eventBus","renderPriority","self","on","evt","context","type","element","visuals","gfx","attrs","canRender","drawShape","drawConnection","getShapePath","getConnectionPath","prototype"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/node_modules/diagram-js/lib/draw/BaseRenderer.js"],"sourcesContent":["var DEFAULT_RENDER_PRIORITY = 1000;\n\n/**\n * The base implementation of shape and connection renderers.\n *\n * @param {EventBus} eventBus\n * @param {number} [renderPriority=1000]\n */\nexport default function BaseRenderer(eventBus, renderPriority) {\n  var self = this;\n\n  renderPriority = renderPriority || DEFAULT_RENDER_PRIORITY;\n\n  eventBus.on([ 'render.shape', 'render.connection' ], renderPriority, function(evt, context) {\n    var type = evt.type,\n        element = context.element,\n        visuals = context.gfx,\n        attrs = context.attrs;\n\n    if (self.canRender(element)) {\n      if (type === 'render.shape') {\n        return self.drawShape(visuals, element, attrs);\n      } else {\n        return self.drawConnection(visuals, element, attrs);\n      }\n    }\n  });\n\n  eventBus.on([ 'render.getShapePath', 'render.getConnectionPath'], renderPriority, function(evt, element) {\n    if (self.canRender(element)) {\n      if (evt.type === 'render.getShapePath') {\n        return self.getShapePath(element);\n      } else {\n        return self.getConnectionPath(element);\n      }\n    }\n  });\n}\n\n/**\n * Should check whether *this* renderer can render\n * the element/connection.\n *\n * @param {element} element\n *\n * @returns {boolean}\n */\nBaseRenderer.prototype.canRender = function() {};\n\n/**\n * Provides the shape's snap svg element to be drawn on the `canvas`.\n *\n * @param {djs.Graphics} visuals\n * @param {Shape} shape\n *\n * @returns {Snap.svg} [returns a Snap.svg paper element ]\n */\nBaseRenderer.prototype.drawShape = function() {};\n\n/**\n * Provides the shape's snap svg element to be drawn on the `canvas`.\n *\n * @param {djs.Graphics} visuals\n * @param {Connection} connection\n *\n * @returns {Snap.svg} [returns a Snap.svg paper element ]\n */\nBaseRenderer.prototype.drawConnection = function() {};\n\n/**\n * Gets the SVG path of a shape that represents it's visual bounds.\n *\n * @param {Shape} shape\n *\n * @return {string} svg path\n */\nBaseRenderer.prototype.getShapePath = function() {};\n\n/**\n * Gets the SVG path of a connection that represents it's visual bounds.\n *\n * @param {Connection} connection\n *\n * @return {string} svg path\n */\nBaseRenderer.prototype.getConnectionPath = function() {};\n"],"mappings":"AAAA,IAAIA,uBAAuB,GAAG,IAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,cAAhC,EAAgD;EAC7D,IAAIC,IAAI,GAAG,IAAX;EAEAD,cAAc,GAAGA,cAAc,IAAIH,uBAAnC;EAEAE,QAAQ,CAACG,EAAT,CAAY,CAAE,cAAF,EAAkB,mBAAlB,CAAZ,EAAqDF,cAArD,EAAqE,UAASG,GAAT,EAAcC,OAAd,EAAuB;IAC1F,IAAIC,IAAI,GAAGF,GAAG,CAACE,IAAf;IAAA,IACIC,OAAO,GAAGF,OAAO,CAACE,OADtB;IAAA,IAEIC,OAAO,GAAGH,OAAO,CAACI,GAFtB;IAAA,IAGIC,KAAK,GAAGL,OAAO,CAACK,KAHpB;;IAKA,IAAIR,IAAI,CAACS,SAAL,CAAeJ,OAAf,CAAJ,EAA6B;MAC3B,IAAID,IAAI,KAAK,cAAb,EAA6B;QAC3B,OAAOJ,IAAI,CAACU,SAAL,CAAeJ,OAAf,EAAwBD,OAAxB,EAAiCG,KAAjC,CAAP;MACD,CAFD,MAEO;QACL,OAAOR,IAAI,CAACW,cAAL,CAAoBL,OAApB,EAA6BD,OAA7B,EAAsCG,KAAtC,CAAP;MACD;IACF;EACF,CAbD;EAeAV,QAAQ,CAACG,EAAT,CAAY,CAAE,qBAAF,EAAyB,0BAAzB,CAAZ,EAAkEF,cAAlE,EAAkF,UAASG,GAAT,EAAcG,OAAd,EAAuB;IACvG,IAAIL,IAAI,CAACS,SAAL,CAAeJ,OAAf,CAAJ,EAA6B;MAC3B,IAAIH,GAAG,CAACE,IAAJ,KAAa,qBAAjB,EAAwC;QACtC,OAAOJ,IAAI,CAACY,YAAL,CAAkBP,OAAlB,CAAP;MACD,CAFD,MAEO;QACL,OAAOL,IAAI,CAACa,iBAAL,CAAuBR,OAAvB,CAAP;MACD;IACF;EACF,CARD;AASD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAR,YAAY,CAACiB,SAAb,CAAuBL,SAAvB,GAAmC,YAAW,CAAE,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,YAAY,CAACiB,SAAb,CAAuBJ,SAAvB,GAAmC,YAAW,CAAE,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAb,YAAY,CAACiB,SAAb,CAAuBH,cAAvB,GAAwC,YAAW,CAAE,CAArD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAd,YAAY,CAACiB,SAAb,CAAuBF,YAAvB,GAAsC,YAAW,CAAE,CAAnD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAf,YAAY,CAACiB,SAAb,CAAuBD,iBAAvB,GAA2C,YAAW,CAAE,CAAxD"},"metadata":{},"sourceType":"module"}