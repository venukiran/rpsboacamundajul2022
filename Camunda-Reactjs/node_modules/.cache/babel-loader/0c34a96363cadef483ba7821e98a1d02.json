{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n/**\n * A content sub-component for Accordion component.\n */\n\nfunction AccordionContent(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', useKeyOnly(active, 'active'), className);\n  var rest = getUnhandledProps(AccordionContent, props);\n  var ElementType = getElementType(AccordionContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nAccordionContent.handledProps = ['active', 'as', 'children', 'className', 'content'];\nAccordionContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Whether or not the content is visible. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nAccordionContent._meta = {\n  name: 'AccordionContent',\n  type: META.TYPES.MODULE,\n  parent: 'Accordion'\n};\nAccordionContent.create = createShorthandFactory(AccordionContent, function (content) {\n  return {\n    content: content\n  };\n});\nexport default AccordionContent;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","META","useKeyOnly","AccordionContent","props","active","children","className","content","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","bool","node","string","contentShorthand","_meta","name","type","TYPES","MODULE","parent","create"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/modules/Accordion/AccordionContent.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n\n/**\n * A content sub-component for Accordion component.\n */\nfunction AccordionContent(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content;\n\n  var classes = cx('content', useKeyOnly(active, 'active'), className);\n  var rest = getUnhandledProps(AccordionContent, props);\n  var ElementType = getElementType(AccordionContent, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? content : children\n  );\n}\n\nAccordionContent.handledProps = ['active', 'as', 'children', 'className', 'content'];\nAccordionContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Whether or not the content is visible. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\n\nAccordionContent._meta = {\n  name: 'AccordionContent',\n  type: META.TYPES.MODULE,\n  parent: 'Accordion'\n};\n\nAccordionContent.create = createShorthandFactory(AccordionContent, function (content) {\n  return { content: content };\n});\n\nexport default AccordionContent;"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,eAAhD,EAAiEC,cAAjE,EAAiFC,iBAAjF,EAAoGC,IAApG,EAA0GC,UAA1G,QAA4H,WAA5H;AAEA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;EAC/B,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;EAAA,IACIC,QAAQ,GAAGF,KAAK,CAACE,QADrB;EAAA,IAEIC,SAAS,GAAGH,KAAK,CAACG,SAFtB;EAAA,IAGIC,OAAO,GAAGJ,KAAK,CAACI,OAHpB;EAKA,IAAIC,OAAO,GAAGhB,EAAE,CAAC,SAAD,EAAYS,UAAU,CAACG,MAAD,EAAS,QAAT,CAAtB,EAA0CE,SAA1C,CAAhB;EACA,IAAIG,IAAI,GAAGV,iBAAiB,CAACG,gBAAD,EAAmBC,KAAnB,CAA5B;EACA,IAAIO,WAAW,GAAGZ,cAAc,CAACI,gBAAD,EAAmBC,KAAnB,CAAhC;EAEA,OAAOT,KAAK,CAACiB,aAAN,CACLD,WADK,EAELnB,QAAQ,CAAC,EAAD,EAAKkB,IAAL,EAAW;IAAEH,SAAS,EAAEE;EAAb,CAAX,CAFH,EAGLb,aAAa,CAACiB,KAAd,CAAoBP,QAApB,IAAgCE,OAAhC,GAA0CF,QAHrC,CAAP;AAKD;;AAEDH,gBAAgB,CAACW,YAAjB,GAAgC,CAAC,QAAD,EAAW,IAAX,EAAiB,UAAjB,EAA6B,WAA7B,EAA0C,SAA1C,CAAhC;AACAX,gBAAgB,CAACY,SAAjB,GAA6BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;EACnE;EACAC,EAAE,EAAErB,eAAe,CAACqB,EAF+C;;EAInE;EACAd,MAAM,EAAEX,SAAS,CAAC0B,IALiD;;EAOnE;EACAd,QAAQ,EAAEZ,SAAS,CAAC2B,IAR+C;;EAUnE;EACAd,SAAS,EAAEb,SAAS,CAAC4B,MAX8C;;EAanE;EACAd,OAAO,EAAEV,eAAe,CAACyB;AAd0C,CAAxC,GAezB,EAfJ;AAiBApB,gBAAgB,CAACqB,KAAjB,GAAyB;EACvBC,IAAI,EAAE,kBADiB;EAEvBC,IAAI,EAAEzB,IAAI,CAAC0B,KAAL,CAAWC,MAFM;EAGvBC,MAAM,EAAE;AAHe,CAAzB;AAMA1B,gBAAgB,CAAC2B,MAAjB,GAA0BjC,sBAAsB,CAACM,gBAAD,EAAmB,UAAUK,OAAV,EAAmB;EACpF,OAAO;IAAEA,OAAO,EAAEA;EAAX,CAAP;AACD,CAF+C,CAAhD;AAIA,eAAeL,gBAAf"},"metadata":{},"sourceType":"module"}