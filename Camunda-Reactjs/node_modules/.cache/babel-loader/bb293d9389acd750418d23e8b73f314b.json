{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n/**\n * A statistic can contain a numeric, icon, image, or text value.\n */\n\nfunction StatisticValue(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      text = props.text;\n  var classes = cx(useKeyOnly(text, 'text'), 'value', className);\n  var rest = getUnhandledProps(StatisticValue, props);\n  var ElementType = getElementType(StatisticValue, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nStatisticValue.handledProps = ['as', 'children', 'className', 'content', 'text'];\nStatisticValue._meta = {\n  name: 'StatisticValue',\n  parent: 'Statistic',\n  type: META.TYPES.VIEW\n};\nStatisticValue.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Format the value with smaller font size to fit nicely beside number values. */\n  text: PropTypes.bool\n} : {};\nStatisticValue.create = createShorthandFactory(StatisticValue, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StatisticValue;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","META","useKeyOnly","StatisticValue","props","children","className","content","text","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","parent","type","TYPES","VIEW","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","bool","create"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticValue.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n\n/**\n * A statistic can contain a numeric, icon, image, or text value.\n */\nfunction StatisticValue(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      text = props.text;\n\n\n  var classes = cx(useKeyOnly(text, 'text'), 'value', className);\n  var rest = getUnhandledProps(StatisticValue, props);\n  var ElementType = getElementType(StatisticValue, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? content : children\n  );\n}\n\nStatisticValue.handledProps = ['as', 'children', 'className', 'content', 'text'];\nStatisticValue._meta = {\n  name: 'StatisticValue',\n  parent: 'Statistic',\n  type: META.TYPES.VIEW\n};\n\nStatisticValue.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Format the value with smaller font size to fit nicely beside number values. */\n  text: PropTypes.bool\n} : {};\n\nStatisticValue.create = createShorthandFactory(StatisticValue, function (content) {\n  return { content: content };\n});\n\nexport default StatisticValue;"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,eAAhD,EAAiEC,cAAjE,EAAiFC,iBAAjF,EAAoGC,IAApG,EAA0GC,UAA1G,QAA4H,WAA5H;AAEA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;EAC7B,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;EAAA,IACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;EAAA,IAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;EAAA,IAGIC,IAAI,GAAGJ,KAAK,CAACI,IAHjB;EAMA,IAAIC,OAAO,GAAGhB,EAAE,CAACS,UAAU,CAACM,IAAD,EAAO,MAAP,CAAX,EAA2B,OAA3B,EAAoCF,SAApC,CAAhB;EACA,IAAII,IAAI,GAAGV,iBAAiB,CAACG,cAAD,EAAiBC,KAAjB,CAA5B;EACA,IAAIO,WAAW,GAAGZ,cAAc,CAACI,cAAD,EAAiBC,KAAjB,CAAhC;EAEA,OAAOT,KAAK,CAACiB,aAAN,CACLD,WADK,EAELnB,QAAQ,CAAC,EAAD,EAAKkB,IAAL,EAAW;IAAEJ,SAAS,EAAEG;EAAb,CAAX,CAFH,EAGLb,aAAa,CAACiB,KAAd,CAAoBR,QAApB,IAAgCE,OAAhC,GAA0CF,QAHrC,CAAP;AAKD;;AAEDF,cAAc,CAACW,YAAf,GAA8B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,MAA3C,CAA9B;AACAX,cAAc,CAACY,KAAf,GAAuB;EACrBC,IAAI,EAAE,gBADe;EAErBC,MAAM,EAAE,WAFa;EAGrBC,IAAI,EAAEjB,IAAI,CAACkB,KAAL,CAAWC;AAHI,CAAvB;AAMAjB,cAAc,CAACkB,SAAf,GAA2BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;EACjE;EACAC,EAAE,EAAE3B,eAAe,CAAC2B,EAF6C;;EAIjE;EACApB,QAAQ,EAAEX,SAAS,CAACgC,IAL6C;;EAOjE;EACApB,SAAS,EAAEZ,SAAS,CAACiC,MAR4C;;EAUjE;EACApB,OAAO,EAAET,eAAe,CAAC8B,gBAXwC;;EAajE;EACApB,IAAI,EAAEd,SAAS,CAACmC;AAdiD,CAAxC,GAevB,EAfJ;AAiBA1B,cAAc,CAAC2B,MAAf,GAAwBjC,sBAAsB,CAACM,cAAD,EAAiB,UAAUI,OAAV,EAAmB;EAChF,OAAO;IAAEA,OAAO,EAAEA;EAAX,CAAP;AACD,CAF6C,CAA9C;AAIA,eAAeJ,cAAf"},"metadata":{},"sourceType":"module"}