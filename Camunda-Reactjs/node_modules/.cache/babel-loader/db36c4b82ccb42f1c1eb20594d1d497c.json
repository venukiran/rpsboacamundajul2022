{"ast":null,"code":"import { assign } from 'min-dash';\nimport inherits from 'inherits';\nimport Refs from 'object-refs';\nvar parentRefs = new Refs({\n  name: 'children',\n  enumerable: true,\n  collection: true\n}, {\n  name: 'parent'\n}),\n    labelRefs = new Refs({\n  name: 'labels',\n  enumerable: true,\n  collection: true\n}, {\n  name: 'labelTarget'\n}),\n    attacherRefs = new Refs({\n  name: 'attachers',\n  collection: true\n}, {\n  name: 'host'\n}),\n    outgoingRefs = new Refs({\n  name: 'outgoing',\n  collection: true\n}, {\n  name: 'source'\n}),\n    incomingRefs = new Refs({\n  name: 'incoming',\n  collection: true\n}, {\n  name: 'target'\n});\n/**\n * @namespace djs.model\n */\n\n/**\n * @memberOf djs.model\n */\n\n/**\n * The basic graphical representation\n *\n * @class\n *\n * @abstract\n */\n\nexport function Base() {\n  /**\n   * The object that backs up the shape\n   *\n   * @name Base#businessObject\n   * @type Object\n   */\n  Object.defineProperty(this, 'businessObject', {\n    writable: true\n  });\n  /**\n   * Single label support, will mapped to multi label array\n   *\n   * @name Base#label\n   * @type Object\n   */\n\n  Object.defineProperty(this, 'label', {\n    get: function () {\n      return this.labels[0];\n    },\n    set: function (newLabel) {\n      var label = this.label,\n          labels = this.labels;\n\n      if (!newLabel && label) {\n        labels.remove(label);\n      } else {\n        labels.add(newLabel, 0);\n      }\n    }\n  });\n  /**\n   * The parent shape\n   *\n   * @name Base#parent\n   * @type Shape\n   */\n\n  parentRefs.bind(this, 'parent');\n  /**\n   * The list of labels\n   *\n   * @name Base#labels\n   * @type Label\n   */\n\n  labelRefs.bind(this, 'labels');\n  /**\n   * The list of outgoing connections\n   *\n   * @name Base#outgoing\n   * @type Array<Connection>\n   */\n\n  outgoingRefs.bind(this, 'outgoing');\n  /**\n   * The list of incoming connections\n   *\n   * @name Base#incoming\n   * @type Array<Connection>\n   */\n\n  incomingRefs.bind(this, 'incoming');\n}\n/**\n * A graphical object\n *\n * @class\n * @constructor\n *\n * @extends Base\n */\n\nexport function Shape() {\n  Base.call(this);\n  /**\n   * Indicates frame shapes\n   *\n   * @name Shape#isFrame\n   * @type boolean\n   */\n\n  /**\n   * The list of children\n   *\n   * @name Shape#children\n   * @type Array<Base>\n   */\n\n  parentRefs.bind(this, 'children');\n  /**\n   * @name Shape#host\n   * @type Shape\n   */\n\n  attacherRefs.bind(this, 'host');\n  /**\n   * @name Shape#attachers\n   * @type Shape\n   */\n\n  attacherRefs.bind(this, 'attachers');\n}\ninherits(Shape, Base);\n/**\n * A root graphical object\n *\n * @class\n * @constructor\n *\n * @extends Shape\n */\n\nexport function Root() {\n  Shape.call(this);\n}\ninherits(Root, Shape);\n/**\n * A label for an element\n *\n * @class\n * @constructor\n *\n * @extends Shape\n */\n\nexport function Label() {\n  Shape.call(this);\n  /**\n   * The labeled element\n   *\n   * @name Label#labelTarget\n   * @type Base\n   */\n\n  labelRefs.bind(this, 'labelTarget');\n}\ninherits(Label, Shape);\n/**\n * A connection between two elements\n *\n * @class\n * @constructor\n *\n * @extends Base\n */\n\nexport function Connection() {\n  Base.call(this);\n  /**\n   * The element this connection originates from\n   *\n   * @name Connection#source\n   * @type Base\n   */\n\n  outgoingRefs.bind(this, 'source');\n  /**\n   * The element this connection points to\n   *\n   * @name Connection#target\n   * @type Base\n   */\n\n  incomingRefs.bind(this, 'target');\n}\ninherits(Connection, Base);\nvar types = {\n  connection: Connection,\n  shape: Shape,\n  label: Label,\n  root: Root\n};\n/**\n * Creates a new model element of the specified type\n *\n * @method create\n *\n * @example\n *\n * var shape1 = Model.create('shape', { x: 10, y: 10, width: 100, height: 100 });\n * var shape2 = Model.create('shape', { x: 210, y: 210, width: 100, height: 100 });\n *\n * var connection = Model.create('connection', { waypoints: [ { x: 110, y: 55 }, {x: 210, y: 55 } ] });\n *\n * @param  {string} type lower-cased model name\n * @param  {Object} attrs attributes to initialize the new model instance with\n *\n * @return {Base} the new model instance\n */\n\nexport function create(type, attrs) {\n  var Type = types[type];\n\n  if (!Type) {\n    throw new Error('unknown type: <' + type + '>');\n  }\n\n  return assign(new Type(), attrs);\n}","map":{"version":3,"names":["assign","inherits","Refs","parentRefs","name","enumerable","collection","labelRefs","attacherRefs","outgoingRefs","incomingRefs","Base","Object","defineProperty","writable","get","labels","set","newLabel","label","remove","add","bind","Shape","call","Root","Label","Connection","types","connection","shape","root","create","type","attrs","Type","Error"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/node_modules/diagram-js/lib/model/index.js"],"sourcesContent":["import { assign } from 'min-dash';\nimport inherits from 'inherits';\n\nimport Refs from 'object-refs';\n\nvar parentRefs = new Refs({ name: 'children', enumerable: true, collection: true }, { name: 'parent' }),\n    labelRefs = new Refs({ name: 'labels', enumerable: true, collection: true }, { name: 'labelTarget' }),\n    attacherRefs = new Refs({ name: 'attachers', collection: true }, { name: 'host' }),\n    outgoingRefs = new Refs({ name: 'outgoing', collection: true }, { name: 'source' }),\n    incomingRefs = new Refs({ name: 'incoming', collection: true }, { name: 'target' });\n\n/**\n * @namespace djs.model\n */\n\n/**\n * @memberOf djs.model\n */\n\n/**\n * The basic graphical representation\n *\n * @class\n *\n * @abstract\n */\nexport function Base() {\n\n  /**\n   * The object that backs up the shape\n   *\n   * @name Base#businessObject\n   * @type Object\n   */\n  Object.defineProperty(this, 'businessObject', {\n    writable: true\n  });\n\n\n  /**\n   * Single label support, will mapped to multi label array\n   *\n   * @name Base#label\n   * @type Object\n   */\n  Object.defineProperty(this, 'label', {\n    get: function() {\n      return this.labels[0];\n    },\n    set: function(newLabel) {\n\n      var label = this.label,\n          labels = this.labels;\n\n      if (!newLabel && label) {\n        labels.remove(label);\n      } else {\n        labels.add(newLabel, 0);\n      }\n    }\n  });\n\n  /**\n   * The parent shape\n   *\n   * @name Base#parent\n   * @type Shape\n   */\n  parentRefs.bind(this, 'parent');\n\n  /**\n   * The list of labels\n   *\n   * @name Base#labels\n   * @type Label\n   */\n  labelRefs.bind(this, 'labels');\n\n  /**\n   * The list of outgoing connections\n   *\n   * @name Base#outgoing\n   * @type Array<Connection>\n   */\n  outgoingRefs.bind(this, 'outgoing');\n\n  /**\n   * The list of incoming connections\n   *\n   * @name Base#incoming\n   * @type Array<Connection>\n   */\n  incomingRefs.bind(this, 'incoming');\n}\n\n\n/**\n * A graphical object\n *\n * @class\n * @constructor\n *\n * @extends Base\n */\nexport function Shape() {\n  Base.call(this);\n\n  /**\n   * Indicates frame shapes\n   *\n   * @name Shape#isFrame\n   * @type boolean\n   */\n\n  /**\n   * The list of children\n   *\n   * @name Shape#children\n   * @type Array<Base>\n   */\n  parentRefs.bind(this, 'children');\n\n  /**\n   * @name Shape#host\n   * @type Shape\n   */\n  attacherRefs.bind(this, 'host');\n\n  /**\n   * @name Shape#attachers\n   * @type Shape\n   */\n  attacherRefs.bind(this, 'attachers');\n}\n\ninherits(Shape, Base);\n\n\n/**\n * A root graphical object\n *\n * @class\n * @constructor\n *\n * @extends Shape\n */\nexport function Root() {\n  Shape.call(this);\n}\n\ninherits(Root, Shape);\n\n\n/**\n * A label for an element\n *\n * @class\n * @constructor\n *\n * @extends Shape\n */\nexport function Label() {\n  Shape.call(this);\n\n  /**\n   * The labeled element\n   *\n   * @name Label#labelTarget\n   * @type Base\n   */\n  labelRefs.bind(this, 'labelTarget');\n}\n\ninherits(Label, Shape);\n\n\n/**\n * A connection between two elements\n *\n * @class\n * @constructor\n *\n * @extends Base\n */\nexport function Connection() {\n  Base.call(this);\n\n  /**\n   * The element this connection originates from\n   *\n   * @name Connection#source\n   * @type Base\n   */\n  outgoingRefs.bind(this, 'source');\n\n  /**\n   * The element this connection points to\n   *\n   * @name Connection#target\n   * @type Base\n   */\n  incomingRefs.bind(this, 'target');\n}\n\ninherits(Connection, Base);\n\n\nvar types = {\n  connection: Connection,\n  shape: Shape,\n  label: Label,\n  root: Root\n};\n\n/**\n * Creates a new model element of the specified type\n *\n * @method create\n *\n * @example\n *\n * var shape1 = Model.create('shape', { x: 10, y: 10, width: 100, height: 100 });\n * var shape2 = Model.create('shape', { x: 210, y: 210, width: 100, height: 100 });\n *\n * var connection = Model.create('connection', { waypoints: [ { x: 110, y: 55 }, {x: 210, y: 55 } ] });\n *\n * @param  {string} type lower-cased model name\n * @param  {Object} attrs attributes to initialize the new model instance with\n *\n * @return {Base} the new model instance\n */\nexport function create(type, attrs) {\n  var Type = types[type];\n  if (!Type) {\n    throw new Error('unknown type: <' + type + '>');\n  }\n  return assign(new Type(), attrs);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}