{"ast":null,"code":"import * as AT from '../../constants/ActionTypes';\nimport { CALL_API, Schemas } from '../../middleware/api';\nexport const fetchProcessDefinitions = processDefinitionId => {\n  if (processDefinitionId) {\n    return {\n      [CALL_API]: {\n        types: [AT.PROCESS_DEFINITION_REQUEST, AT.PROCESS_DEFINITION_SUCCESS, AT.PROCESS_DEFINITION_FAILURE],\n        endpoint: \"process-definition?processDefinitionId=\".concat(processDefinitionId),\n        schema: Schemas.PROCESS_DEFINITION_ARRAY\n      }\n    };\n  } else {\n    return {\n      [CALL_API]: {\n        types: [AT.PROCESS_DEFINITION_REQUEST, AT.PROCESS_DEFINITION_SUCCESS, AT.PROCESS_DEFINITION_FAILURE],\n        endpoint: 'process-definition?latestVersion=true',\n        schema: Schemas.PROCESS_DEFINITION_ARRAY\n      }\n    };\n  }\n};\nexport const fetchFormKey = processDefinitionKey => ({\n  [CALL_API]: {\n    types: [AT.FORM_KEY_REQUEST, AT.FORM_KEY_SUCCESS, AT.FORM_KEY_FAILURE],\n    endpoint: \"process-definition/key/\".concat(processDefinitionKey, \"/startForm\"),\n    schema: Schemas.FORM_KEY\n  }\n});\nexport const fetchProcessDefinitionXML = processDefinitionId => ({\n  [CALL_API]: {\n    types: [AT.PROCESS_DEFINITION_XML_REQUEST, AT.PROCESS_DEFINITION_XML_SUCCESS, AT.PROCESS_DEFINITION_XML_FAILURE],\n    endpoint: \"/process-definition/\".concat(processDefinitionId, \"/xml\"),\n    schema: Schemas.PROCESS_DEFINITION_XML\n  }\n});\nexport const postProcessInstance = (processDefinitionKey, values) => ({\n  [CALL_API]: {\n    types: [AT.NEW_PROCESS_INSTANCE_REQUEST, AT.NEW_PROCESS_INSTANCE_SUCCESS, AT.NEW_PROCESS_INSTANCE_FAILURE],\n    endpoint: \"process-definition/key/\".concat(processDefinitionKey, \"/start\"),\n    schema: Schemas.PROCESS_INSTANCE_STARTED,\n    settings: {\n      method: 'post',\n      body: JSON.stringify(values),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }\n  }\n});","map":{"version":3,"names":["AT","CALL_API","Schemas","fetchProcessDefinitions","processDefinitionId","types","PROCESS_DEFINITION_REQUEST","PROCESS_DEFINITION_SUCCESS","PROCESS_DEFINITION_FAILURE","endpoint","schema","PROCESS_DEFINITION_ARRAY","fetchFormKey","processDefinitionKey","FORM_KEY_REQUEST","FORM_KEY_SUCCESS","FORM_KEY_FAILURE","FORM_KEY","fetchProcessDefinitionXML","PROCESS_DEFINITION_XML_REQUEST","PROCESS_DEFINITION_XML_SUCCESS","PROCESS_DEFINITION_XML_FAILURE","PROCESS_DEFINITION_XML","postProcessInstance","values","NEW_PROCESS_INSTANCE_REQUEST","NEW_PROCESS_INSTANCE_SUCCESS","NEW_PROCESS_INSTANCE_FAILURE","PROCESS_INSTANCE_STARTED","settings","method","body","JSON","stringify","headers"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/src/actions/camunda-rest/process-definition.js"],"sourcesContent":["import * as AT from '../../constants/ActionTypes'\r\nimport { CALL_API, Schemas } from '../../middleware/api'\r\n\r\nexport const fetchProcessDefinitions = (processDefinitionId) => {\r\n  if (processDefinitionId) {\r\n    return {\r\n      [CALL_API]: {\r\n        types: [ AT.PROCESS_DEFINITION_REQUEST, AT.PROCESS_DEFINITION_SUCCESS, AT.PROCESS_DEFINITION_FAILURE ],\r\n        endpoint: `process-definition?processDefinitionId=${processDefinitionId}`,\r\n        schema: Schemas.PROCESS_DEFINITION_ARRAY\r\n      }\r\n    }\r\n  } else {\r\n    return {\r\n      [CALL_API]: {\r\n        types: [ AT.PROCESS_DEFINITION_REQUEST, AT.PROCESS_DEFINITION_SUCCESS, AT.PROCESS_DEFINITION_FAILURE ],\r\n        endpoint: 'process-definition?latestVersion=true',\r\n        schema: Schemas.PROCESS_DEFINITION_ARRAY\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const fetchFormKey = (processDefinitionKey) => ({\r\n  [CALL_API]: {\r\n    types: [ AT.FORM_KEY_REQUEST, AT.FORM_KEY_SUCCESS, AT.FORM_KEY_FAILURE ],\r\n    endpoint: `process-definition/key/${processDefinitionKey}/startForm`,\r\n    schema: Schemas.FORM_KEY\r\n  }\r\n})\r\n\r\nexport const fetchProcessDefinitionXML = (processDefinitionId) => ({\r\n  [CALL_API]: {\r\n    types: [ AT.PROCESS_DEFINITION_XML_REQUEST, AT.PROCESS_DEFINITION_XML_SUCCESS, AT.PROCESS_DEFINITION_XML_FAILURE ],\r\n    endpoint: `/process-definition/${processDefinitionId}/xml`,\r\n    schema: Schemas.PROCESS_DEFINITION_XML\r\n  }\r\n})\r\n\r\nexport const postProcessInstance = (processDefinitionKey, values) => ({\r\n  [CALL_API]: {\r\n    types: [ AT.NEW_PROCESS_INSTANCE_REQUEST, AT.NEW_PROCESS_INSTANCE_SUCCESS, AT.NEW_PROCESS_INSTANCE_FAILURE ],\r\n    endpoint: `process-definition/key/${processDefinitionKey}/start`,\r\n    schema: Schemas.PROCESS_INSTANCE_STARTED,\r\n    settings: {\r\n      method: 'post',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }\r\n  }\r\n})\r\n"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,6BAApB;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,sBAAlC;AAEA,OAAO,MAAMC,uBAAuB,GAAIC,mBAAD,IAAyB;EAC9D,IAAIA,mBAAJ,EAAyB;IACvB,OAAO;MACL,CAACH,QAAD,GAAY;QACVI,KAAK,EAAE,CAAEL,EAAE,CAACM,0BAAL,EAAiCN,EAAE,CAACO,0BAApC,EAAgEP,EAAE,CAACQ,0BAAnE,CADG;QAEVC,QAAQ,mDAA4CL,mBAA5C,CAFE;QAGVM,MAAM,EAAER,OAAO,CAACS;MAHN;IADP,CAAP;EAOD,CARD,MAQO;IACL,OAAO;MACL,CAACV,QAAD,GAAY;QACVI,KAAK,EAAE,CAAEL,EAAE,CAACM,0BAAL,EAAiCN,EAAE,CAACO,0BAApC,EAAgEP,EAAE,CAACQ,0BAAnE,CADG;QAEVC,QAAQ,EAAE,uCAFA;QAGVC,MAAM,EAAER,OAAO,CAACS;MAHN;IADP,CAAP;EAOD;AACF,CAlBM;AAoBP,OAAO,MAAMC,YAAY,GAAIC,oBAAD,KAA2B;EACrD,CAACZ,QAAD,GAAY;IACVI,KAAK,EAAE,CAAEL,EAAE,CAACc,gBAAL,EAAuBd,EAAE,CAACe,gBAA1B,EAA4Cf,EAAE,CAACgB,gBAA/C,CADG;IAEVP,QAAQ,mCAA4BI,oBAA5B,eAFE;IAGVH,MAAM,EAAER,OAAO,CAACe;EAHN;AADyC,CAA3B,CAArB;AAQP,OAAO,MAAMC,yBAAyB,GAAId,mBAAD,KAA0B;EACjE,CAACH,QAAD,GAAY;IACVI,KAAK,EAAE,CAAEL,EAAE,CAACmB,8BAAL,EAAqCnB,EAAE,CAACoB,8BAAxC,EAAwEpB,EAAE,CAACqB,8BAA3E,CADG;IAEVZ,QAAQ,gCAAyBL,mBAAzB,SAFE;IAGVM,MAAM,EAAER,OAAO,CAACoB;EAHN;AADqD,CAA1B,CAAlC;AAQP,OAAO,MAAMC,mBAAmB,GAAG,CAACV,oBAAD,EAAuBW,MAAvB,MAAmC;EACpE,CAACvB,QAAD,GAAY;IACVI,KAAK,EAAE,CAAEL,EAAE,CAACyB,4BAAL,EAAmCzB,EAAE,CAAC0B,4BAAtC,EAAoE1B,EAAE,CAAC2B,4BAAvE,CADG;IAEVlB,QAAQ,mCAA4BI,oBAA5B,WAFE;IAGVH,MAAM,EAAER,OAAO,CAAC0B,wBAHN;IAIVC,QAAQ,EAAE;MACRC,MAAM,EAAE,MADA;MAERC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,MAAf,CAFE;MAGRU,OAAO,EAAE;QACP,UAAU,kBADH;QAEP,gBAAgB;MAFT;IAHD;EAJA;AADwD,CAAnC,CAA5B"},"metadata":{},"sourceType":"module"}