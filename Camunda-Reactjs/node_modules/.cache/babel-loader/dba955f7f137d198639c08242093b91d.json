{"ast":null,"code":"import { isFunction } from 'min-dash';\nimport { closest as domClosest, event as domEvent, matches as domMatches } from 'min-dom';\nimport { hasModifier, isCmd, isKey, isShift } from './KeyboardUtil';\nvar KEYDOWN_EVENT = 'keyboard.keydown',\n    KEYUP_EVENT = 'keyboard.keyup';\nvar HANDLE_MODIFIER_ATTRIBUTE = 'input-handle-modified-keys';\nvar DEFAULT_PRIORITY = 1000;\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * For keys pressed down, keyboard fires `keyboard.keydown` event.\n * The event context contains one field which is `KeyboardEvent` event.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain one field which is node.\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n */\n\nexport default function Keyboard(config, eventBus) {\n  var self = this;\n  this._config = config || {};\n  this._eventBus = eventBus;\n  this._keydownHandler = this._keydownHandler.bind(this);\n  this._keyupHandler = this._keyupHandler.bind(this); // properly clean dom registrations\n\n  eventBus.on('diagram.destroy', function () {\n    self._fire('destroy');\n\n    self.unbind();\n  });\n  eventBus.on('diagram.init', function () {\n    self._fire('init');\n  });\n  eventBus.on('attach', function () {\n    if (config && config.bindTo) {\n      self.bind(config.bindTo);\n    }\n  });\n  eventBus.on('detach', function () {\n    self.unbind();\n  });\n}\nKeyboard.$inject = ['config.keyboard', 'eventBus'];\n\nKeyboard.prototype._keydownHandler = function (event) {\n  this._keyHandler(event, KEYDOWN_EVENT);\n};\n\nKeyboard.prototype._keyupHandler = function (event) {\n  this._keyHandler(event, KEYUP_EVENT);\n};\n\nKeyboard.prototype._keyHandler = function (event, type) {\n  var eventBusResult;\n\n  if (this._isEventIgnored(event)) {\n    return;\n  }\n\n  var context = {\n    keyEvent: event\n  };\n  eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);\n\n  if (eventBusResult) {\n    event.preventDefault();\n  }\n};\n\nKeyboard.prototype._isEventIgnored = function (event) {\n  return isInput(event.target) && this._isModifiedKeyIgnored(event);\n};\n\nKeyboard.prototype._isModifiedKeyIgnored = function (event) {\n  if (!isCmd(event)) {\n    return true;\n  }\n\n  var allowedModifiers = this._getAllowedModifiers(event.target);\n\n  return !allowedModifiers.includes(event.key);\n};\n\nKeyboard.prototype._getAllowedModifiers = function (element) {\n  var modifierContainer = domClosest(element, '[' + HANDLE_MODIFIER_ATTRIBUTE + ']', true);\n\n  if (!modifierContainer || this._node && !this._node.contains(modifierContainer)) {\n    return [];\n  }\n\n  return modifierContainer.getAttribute(HANDLE_MODIFIER_ATTRIBUTE).split(',');\n};\n\nKeyboard.prototype.bind = function (node) {\n  // make sure that the keyboard is only bound once to the DOM\n  this.unbind();\n  this._node = node; // bind key events\n\n  domEvent.bind(node, 'keydown', this._keydownHandler, true);\n  domEvent.bind(node, 'keyup', this._keyupHandler, true);\n\n  this._fire('bind');\n};\n\nKeyboard.prototype.getBinding = function () {\n  return this._node;\n};\n\nKeyboard.prototype.unbind = function () {\n  var node = this._node;\n\n  if (node) {\n    this._fire('unbind'); // unbind key events\n\n\n    domEvent.unbind(node, 'keydown', this._keydownHandler, true);\n    domEvent.unbind(node, 'keyup', this._keyupHandler, true);\n  }\n\n  this._node = null;\n};\n\nKeyboard.prototype._fire = function (event) {\n  this._eventBus.fire('keyboard.' + event, {\n    node: this._node\n  });\n};\n/**\n * Add a listener function that is notified with `KeyboardEvent` whenever\n * the keyboard is bound and the user presses a key. If no priority is\n * provided, the default value of 1000 is used.\n *\n * @param {number} [priority]\n * @param {Function} listener\n * @param {string} type\n */\n\n\nKeyboard.prototype.addListener = function (priority, listener, type) {\n  if (isFunction(priority)) {\n    type = listener;\n    listener = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);\n};\n\nKeyboard.prototype.removeListener = function (listener, type) {\n  this._eventBus.off(type || KEYDOWN_EVENT, listener);\n};\n\nKeyboard.prototype.hasModifier = hasModifier;\nKeyboard.prototype.isCmd = isCmd;\nKeyboard.prototype.isShift = isShift;\nKeyboard.prototype.isKey = isKey; // helpers ///////\n\nfunction isInput(target) {\n  return target && (domMatches(target, 'input, textarea') || target.contentEditable === 'true');\n}","map":{"version":3,"names":["isFunction","closest","domClosest","event","domEvent","matches","domMatches","hasModifier","isCmd","isKey","isShift","KEYDOWN_EVENT","KEYUP_EVENT","HANDLE_MODIFIER_ATTRIBUTE","DEFAULT_PRIORITY","Keyboard","config","eventBus","self","_config","_eventBus","_keydownHandler","bind","_keyupHandler","on","_fire","unbind","bindTo","$inject","prototype","_keyHandler","type","eventBusResult","_isEventIgnored","context","keyEvent","fire","preventDefault","isInput","target","_isModifiedKeyIgnored","allowedModifiers","_getAllowedModifiers","includes","key","element","modifierContainer","_node","contains","getAttribute","split","node","getBinding","addListener","priority","listener","removeListener","off","contentEditable"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/node_modules/diagram-js/lib/features/keyboard/Keyboard.js"],"sourcesContent":["import {\n  isFunction\n} from 'min-dash';\n\nimport {\n  closest as domClosest,\n  event as domEvent,\n  matches as domMatches\n} from 'min-dom';\n\nimport {\n  hasModifier,\n  isCmd,\n  isKey,\n  isShift\n} from './KeyboardUtil';\n\nvar KEYDOWN_EVENT = 'keyboard.keydown',\n    KEYUP_EVENT = 'keyboard.keyup';\n\nvar HANDLE_MODIFIER_ATTRIBUTE = 'input-handle-modified-keys';\n\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * For keys pressed down, keyboard fires `keyboard.keydown` event.\n * The event context contains one field which is `KeyboardEvent` event.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain one field which is node.\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n */\nexport default function Keyboard(config, eventBus) {\n  var self = this;\n\n  this._config = config || {};\n  this._eventBus = eventBus;\n\n  this._keydownHandler = this._keydownHandler.bind(this);\n  this._keyupHandler = this._keyupHandler.bind(this);\n\n  // properly clean dom registrations\n  eventBus.on('diagram.destroy', function() {\n    self._fire('destroy');\n\n    self.unbind();\n  });\n\n  eventBus.on('diagram.init', function() {\n    self._fire('init');\n  });\n\n  eventBus.on('attach', function() {\n    if (config && config.bindTo) {\n      self.bind(config.bindTo);\n    }\n  });\n\n  eventBus.on('detach', function() {\n    self.unbind();\n  });\n}\n\nKeyboard.$inject = [\n  'config.keyboard',\n  'eventBus'\n];\n\nKeyboard.prototype._keydownHandler = function(event) {\n  this._keyHandler(event, KEYDOWN_EVENT);\n};\n\nKeyboard.prototype._keyupHandler = function(event) {\n  this._keyHandler(event, KEYUP_EVENT);\n};\n\nKeyboard.prototype._keyHandler = function(event, type) {\n  var eventBusResult;\n\n  if (this._isEventIgnored(event)) {\n    return;\n  }\n\n  var context = {\n    keyEvent: event\n  };\n\n  eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);\n\n  if (eventBusResult) {\n    event.preventDefault();\n  }\n};\n\nKeyboard.prototype._isEventIgnored = function(event) {\n  return isInput(event.target) && this._isModifiedKeyIgnored(event);\n};\n\nKeyboard.prototype._isModifiedKeyIgnored = function(event) {\n  if (!isCmd(event)) {\n    return true;\n  }\n\n  var allowedModifiers = this._getAllowedModifiers(event.target);\n  return !allowedModifiers.includes(event.key);\n};\n\nKeyboard.prototype._getAllowedModifiers = function(element) {\n  var modifierContainer = domClosest(element, '[' + HANDLE_MODIFIER_ATTRIBUTE + ']', true);\n\n  if (!modifierContainer || (this._node && !this._node.contains(modifierContainer))) {\n    return [];\n  }\n\n  return modifierContainer.getAttribute(HANDLE_MODIFIER_ATTRIBUTE).split(',');\n};\n\nKeyboard.prototype.bind = function(node) {\n\n  // make sure that the keyboard is only bound once to the DOM\n  this.unbind();\n\n  this._node = node;\n\n  // bind key events\n  domEvent.bind(node, 'keydown', this._keydownHandler, true);\n  domEvent.bind(node, 'keyup', this._keyupHandler, true);\n\n  this._fire('bind');\n};\n\nKeyboard.prototype.getBinding = function() {\n  return this._node;\n};\n\nKeyboard.prototype.unbind = function() {\n  var node = this._node;\n\n  if (node) {\n    this._fire('unbind');\n\n    // unbind key events\n    domEvent.unbind(node, 'keydown', this._keydownHandler, true);\n    domEvent.unbind(node, 'keyup', this._keyupHandler, true);\n  }\n\n  this._node = null;\n};\n\nKeyboard.prototype._fire = function(event) {\n  this._eventBus.fire('keyboard.' + event, { node: this._node });\n};\n\n/**\n * Add a listener function that is notified with `KeyboardEvent` whenever\n * the keyboard is bound and the user presses a key. If no priority is\n * provided, the default value of 1000 is used.\n *\n * @param {number} [priority]\n * @param {Function} listener\n * @param {string} type\n */\nKeyboard.prototype.addListener = function(priority, listener, type) {\n  if (isFunction(priority)) {\n    type = listener;\n    listener = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);\n};\n\nKeyboard.prototype.removeListener = function(listener, type) {\n  this._eventBus.off(type || KEYDOWN_EVENT, listener);\n};\n\nKeyboard.prototype.hasModifier = hasModifier;\nKeyboard.prototype.isCmd = isCmd;\nKeyboard.prototype.isShift = isShift;\nKeyboard.prototype.isKey = isKey;\n\n\n\n// helpers ///////\n\nfunction isInput(target) {\n  return target && (domMatches(target, 'input, textarea') || target.contentEditable === 'true');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}