{"ast":null,"code":"import * as AT from '../../constants/ActionTypes';\nimport { CALL_API, Schemas } from '../../middleware/api';\nexport const fetchTasks = () => ({\n  [CALL_API]: {\n    types: [AT.TASKS_REQUEST, AT.TASKS_SUCCESS, AT.TASKS_FAILURE],\n    endpoint: 'task?sortBy=created&sortOrder=desc',\n    schema: Schemas.TASK_ARRAY\n  }\n});\nexport const fetchTaskFormKey = taskId => ({\n  [CALL_API]: {\n    types: [AT.TASK_FORM_KEY_REQUEST, AT.TASK_FORM_KEY_SUCCESS, AT.TASK_FORM_KEY_FAILURE],\n    endpoint: \"task/\".concat(taskId, \"/form\"),\n    schema: Schemas.FORM_KEY\n  }\n});\nexport const postCompleTask = (taskId, values) => ({\n  [CALL_API]: {\n    types: [AT.TASK_SUBMITTED_REQUEST, AT.TASK_SUBMITTED_SUCCESS, AT.TASK_SUBMITTED_FAILURE],\n    endpoint: \"task/\".concat(taskId, \"/complete\"),\n    schema: Schemas.PROCESS_INSTANCE_STARTED,\n    settings: {\n      method: 'post',\n      body: JSON.stringify(values),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }\n  }\n});\nexport const fetchTaskVariables = (taskId, variableNames) => {\n  const variableName = Object.keys(variableNames).join(',');\n  return {\n    [CALL_API]: {\n      types: [AT.TASK_VARIABLES_REQUEST, AT.TASK_VARIABLES_SUCCESS, AT.TASK_VARIABLES_FAILURE],\n      endpoint: \"task/\".concat(taskId, \"/form-variables?variableNames=\").concat(variableName),\n      schema: Schemas.TASK_VARIABLES\n    }\n  };\n};","map":{"version":3,"names":["AT","CALL_API","Schemas","fetchTasks","types","TASKS_REQUEST","TASKS_SUCCESS","TASKS_FAILURE","endpoint","schema","TASK_ARRAY","fetchTaskFormKey","taskId","TASK_FORM_KEY_REQUEST","TASK_FORM_KEY_SUCCESS","TASK_FORM_KEY_FAILURE","FORM_KEY","postCompleTask","values","TASK_SUBMITTED_REQUEST","TASK_SUBMITTED_SUCCESS","TASK_SUBMITTED_FAILURE","PROCESS_INSTANCE_STARTED","settings","method","body","JSON","stringify","headers","fetchTaskVariables","variableNames","variableName","Object","keys","join","TASK_VARIABLES_REQUEST","TASK_VARIABLES_SUCCESS","TASK_VARIABLES_FAILURE","TASK_VARIABLES"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/src/actions/camunda-rest/task.js"],"sourcesContent":["import * as AT from '../../constants/ActionTypes'\r\nimport { CALL_API, Schemas } from '../../middleware/api'\r\n\r\nexport const fetchTasks = () => ({\r\n  [CALL_API]: {\r\n    types: [ AT.TASKS_REQUEST, AT.TASKS_SUCCESS, AT.TASKS_FAILURE ],\r\n    endpoint: 'task?sortBy=created&sortOrder=desc',\r\n    schema: Schemas.TASK_ARRAY\r\n  }\r\n})\r\n\r\nexport const fetchTaskFormKey = (taskId) => ({\r\n  [CALL_API]: {\r\n    types: [ AT.TASK_FORM_KEY_REQUEST, AT.TASK_FORM_KEY_SUCCESS, AT.TASK_FORM_KEY_FAILURE ],\r\n    endpoint: `task/${taskId}/form`,\r\n    schema: Schemas.FORM_KEY\r\n  }\r\n})\r\n\r\nexport const postCompleTask = (taskId, values) => ({\r\n  [CALL_API]: {\r\n    types: [ AT.TASK_SUBMITTED_REQUEST, AT.TASK_SUBMITTED_SUCCESS, AT.TASK_SUBMITTED_FAILURE ],\r\n    endpoint: `task/${taskId}/complete`,\r\n    schema: Schemas.PROCESS_INSTANCE_STARTED,\r\n    settings: {\r\n      method: 'post',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\nexport const fetchTaskVariables = (taskId, variableNames) => {\r\n  const variableName = Object.keys(variableNames).join(',')\r\n  return {\r\n    [CALL_API]: {\r\n      types: [ AT.TASK_VARIABLES_REQUEST, AT.TASK_VARIABLES_SUCCESS, AT.TASK_VARIABLES_FAILURE ],\r\n      endpoint: `task/${taskId}/form-variables?variableNames=${variableName}`,\r\n      schema: Schemas.TASK_VARIABLES\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,6BAApB;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,sBAAlC;AAEA,OAAO,MAAMC,UAAU,GAAG,OAAO;EAC/B,CAACF,QAAD,GAAY;IACVG,KAAK,EAAE,CAAEJ,EAAE,CAACK,aAAL,EAAoBL,EAAE,CAACM,aAAvB,EAAsCN,EAAE,CAACO,aAAzC,CADG;IAEVC,QAAQ,EAAE,oCAFA;IAGVC,MAAM,EAAEP,OAAO,CAACQ;EAHN;AADmB,CAAP,CAAnB;AAQP,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,KAAa;EAC3C,CAACX,QAAD,GAAY;IACVG,KAAK,EAAE,CAAEJ,EAAE,CAACa,qBAAL,EAA4Bb,EAAE,CAACc,qBAA/B,EAAsDd,EAAE,CAACe,qBAAzD,CADG;IAEVP,QAAQ,iBAAUI,MAAV,UAFE;IAGVH,MAAM,EAAEP,OAAO,CAACc;EAHN;AAD+B,CAAb,CAAzB;AAQP,OAAO,MAAMC,cAAc,GAAG,CAACL,MAAD,EAASM,MAAT,MAAqB;EACjD,CAACjB,QAAD,GAAY;IACVG,KAAK,EAAE,CAAEJ,EAAE,CAACmB,sBAAL,EAA6BnB,EAAE,CAACoB,sBAAhC,EAAwDpB,EAAE,CAACqB,sBAA3D,CADG;IAEVb,QAAQ,iBAAUI,MAAV,cAFE;IAGVH,MAAM,EAAEP,OAAO,CAACoB,wBAHN;IAIVC,QAAQ,EAAE;MACRC,MAAM,EAAE,MADA;MAERC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,MAAf,CAFE;MAGRU,OAAO,EAAE;QACP,UAAU,kBADH;QAEP,gBAAgB;MAFT;IAHD;EAJA;AADqC,CAArB,CAAvB;AAgBP,OAAO,MAAMC,kBAAkB,GAAG,CAACjB,MAAD,EAASkB,aAAT,KAA2B;EAC3D,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BI,IAA3B,CAAgC,GAAhC,CAArB;EACA,OAAO;IACL,CAACjC,QAAD,GAAY;MACVG,KAAK,EAAE,CAAEJ,EAAE,CAACmC,sBAAL,EAA6BnC,EAAE,CAACoC,sBAAhC,EAAwDpC,EAAE,CAACqC,sBAA3D,CADG;MAEV7B,QAAQ,iBAAUI,MAAV,2CAAiDmB,YAAjD,CAFE;MAGVtB,MAAM,EAAEP,OAAO,CAACoC;IAHN;EADP,CAAP;AAOD,CATM"},"metadata":{},"sourceType":"module"}