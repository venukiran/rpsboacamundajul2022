{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n/**\n * Button groups can contain conditionals.\n */\n\nfunction ButtonOr(props) {\n  var className = props.className,\n      text = props.text;\n  var classes = cx('or', className);\n  var rest = getUnhandledProps(ButtonOr, props);\n  var ElementType = getElementType(ButtonOr, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes,\n    'data-text': text\n  }));\n}\n\nButtonOr.handledProps = ['as', 'className', 'text'];\nButtonOr._meta = {\n  name: 'ButtonOr',\n  parent: 'Button',\n  type: META.TYPES.ELEMENT\n};\nButtonOr.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Or buttons can have their text localized, or adjusted by using the text prop. */\n  text: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : {};\nexport default ButtonOr;","map":{"version":3,"names":["_extends","cx","PropTypes","React","customPropTypes","getElementType","getUnhandledProps","META","ButtonOr","props","className","text","classes","rest","ElementType","createElement","handledProps","_meta","name","parent","type","TYPES","ELEMENT","propTypes","process","env","NODE_ENV","as","string","oneOfType","number"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/elements/Button/ButtonOr.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n\n/**\n * Button groups can contain conditionals.\n */\nfunction ButtonOr(props) {\n  var className = props.className,\n      text = props.text;\n\n  var classes = cx('or', className);\n  var rest = getUnhandledProps(ButtonOr, props);\n  var ElementType = getElementType(ButtonOr, props);\n\n  return React.createElement(ElementType, _extends({}, rest, { className: classes, 'data-text': text }));\n}\n\nButtonOr.handledProps = ['as', 'className', 'text'];\nButtonOr._meta = {\n  name: 'ButtonOr',\n  parent: 'Button',\n  type: META.TYPES.ELEMENT\n};\n\nButtonOr.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Or buttons can have their text localized, or adjusted by using the text prop. */\n  text: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : {};\n\nexport default ButtonOr;"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,EAA6DC,IAA7D,QAAyE,WAAzE;AAEA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EACvB,IAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;EAAA,IACIC,IAAI,GAAGF,KAAK,CAACE,IADjB;EAGA,IAAIC,OAAO,GAAGX,EAAE,CAAC,IAAD,EAAOS,SAAP,CAAhB;EACA,IAAIG,IAAI,GAAGP,iBAAiB,CAACE,QAAD,EAAWC,KAAX,CAA5B;EACA,IAAIK,WAAW,GAAGT,cAAc,CAACG,QAAD,EAAWC,KAAX,CAAhC;EAEA,OAAON,KAAK,CAACY,aAAN,CAAoBD,WAApB,EAAiCd,QAAQ,CAAC,EAAD,EAAKa,IAAL,EAAW;IAAEH,SAAS,EAAEE,OAAb;IAAsB,aAAaD;EAAnC,CAAX,CAAzC,CAAP;AACD;;AAEDH,QAAQ,CAACQ,YAAT,GAAwB,CAAC,IAAD,EAAO,WAAP,EAAoB,MAApB,CAAxB;AACAR,QAAQ,CAACS,KAAT,GAAiB;EACfC,IAAI,EAAE,UADS;EAEfC,MAAM,EAAE,QAFO;EAGfC,IAAI,EAAEb,IAAI,CAACc,KAAL,CAAWC;AAHF,CAAjB;AAMAd,QAAQ,CAACe,SAAT,GAAqBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;EAC3D;EACAC,EAAE,EAAEvB,eAAe,CAACuB,EAFuC;;EAI3D;EACAjB,SAAS,EAAER,SAAS,CAAC0B,MALsC;;EAO3D;EACAjB,IAAI,EAAET,SAAS,CAAC2B,SAAV,CAAoB,CAAC3B,SAAS,CAAC4B,MAAX,EAAmB5B,SAAS,CAAC0B,MAA7B,CAApB;AARqD,CAAxC,GASjB,EATJ;AAWA,eAAepB,QAAf"},"metadata":{},"sourceType":"module"}