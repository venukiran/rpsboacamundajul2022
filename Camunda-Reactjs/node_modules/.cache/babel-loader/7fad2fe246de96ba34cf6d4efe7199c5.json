{"ast":null,"code":"import * as ProcessDefinitionActions from './camunda-rest/process-definition';\nimport * as TaskActions from './camunda-rest/task';\nimport * as DeploymentActions from './camunda-rest/deployment';\nexport const loadTasks = () => (dispatch, getState) => {\n  return dispatch(TaskActions.fetchTasks());\n};\nexport const loadTaskFormKey = taskId => (dispatch, getState) => {\n  return dispatch(TaskActions.fetchTaskFormKey(taskId));\n};\nexport const completeTask = (taskId, values) => (dispatch, getState) => {\n  return dispatch(TaskActions.postCompleTask(taskId, values));\n};\nexport const loadProcessDefinitions = processDefinitionId => (dispatch, getState) => {\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitions(processDefinitionId));\n};\nexport const loadProcessDefinitionsWithXML = processDefinitionId => (dispatch, getState) => {\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitions(processDefinitionId)).then(data => {\n    data.response.result.forEach(id => {\n      dispatch(ProcessDefinitionActions.fetchProcessDefinitionXML(id));\n    });\n  });\n};\nexport const loadProcessDefinitionXML = processDefinitionId => (dispatch, getState) => {\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitionXML(processDefinitionId));\n};\nexport const loadFormKey = processDefinitionKey => (dispatch, getState) => {\n  return dispatch(ProcessDefinitionActions.fetchFormKey(processDefinitionKey));\n};\nexport const startProcessInstance = (processDefinitionKey, values) => (dispatch, getState) => {\n  return dispatch(ProcessDefinitionActions.postProcessInstance(processDefinitionKey, values));\n};\nexport const loadTaskVariables = (taskId, variableNames) => (dispatch, getState) => {\n  return dispatch(TaskActions.fetchTaskVariables(taskId, variableNames));\n};\nexport const deployProcess = (filename, file) => (dispatch, getState) => {\n  return dispatch(DeploymentActions.postProcessXML(filename, file));\n};","map":{"version":3,"names":["ProcessDefinitionActions","TaskActions","DeploymentActions","loadTasks","dispatch","getState","fetchTasks","loadTaskFormKey","taskId","fetchTaskFormKey","completeTask","values","postCompleTask","loadProcessDefinitions","processDefinitionId","fetchProcessDefinitions","loadProcessDefinitionsWithXML","then","data","response","result","forEach","id","fetchProcessDefinitionXML","loadProcessDefinitionXML","loadFormKey","processDefinitionKey","fetchFormKey","startProcessInstance","postProcessInstance","loadTaskVariables","variableNames","fetchTaskVariables","deployProcess","filename","file","postProcessXML"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/src/actions/index.js"],"sourcesContent":["import * as ProcessDefinitionActions from './camunda-rest/process-definition'\r\nimport * as TaskActions from './camunda-rest/task'\r\nimport * as DeploymentActions from './camunda-rest/deployment'\r\n\r\nexport const loadTasks = () => (dispatch, getState) => {\r\n  return dispatch(TaskActions.fetchTasks())\r\n}\r\n\r\nexport const loadTaskFormKey = (taskId) => (dispatch, getState) => {\r\n  return dispatch(TaskActions.fetchTaskFormKey(taskId))\r\n}\r\n\r\nexport const completeTask = (taskId, values) => (dispatch, getState) => {\r\n  return dispatch(TaskActions.postCompleTask(taskId, values))\r\n}\r\n\r\nexport const loadProcessDefinitions = (processDefinitionId) => (dispatch, getState) => {\r\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitions(processDefinitionId))\r\n}\r\n\r\nexport const loadProcessDefinitionsWithXML = (processDefinitionId) => (dispatch, getState) => {\r\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitions(processDefinitionId)).then((data) => {\r\n    data.response.result.forEach((id) => {\r\n      dispatch(ProcessDefinitionActions.fetchProcessDefinitionXML(id))\r\n    });\r\n\r\n  })\r\n}\r\n\r\nexport const loadProcessDefinitionXML = (processDefinitionId) => (dispatch, getState) => {\r\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitionXML(processDefinitionId))\r\n}\r\n\r\nexport const loadFormKey = (processDefinitionKey) => (dispatch, getState) => {\r\n  return dispatch(ProcessDefinitionActions.fetchFormKey(processDefinitionKey))\r\n}\r\n\r\nexport const startProcessInstance = (processDefinitionKey, values) => (dispatch, getState) => {\r\n  return dispatch(ProcessDefinitionActions.postProcessInstance(processDefinitionKey, values))\r\n}\r\n\r\nexport const loadTaskVariables = (taskId, variableNames) => (dispatch, getState) => {\r\n  return dispatch(TaskActions.fetchTaskVariables(taskId, variableNames))\r\n}\r\n\r\nexport const deployProcess = (filename, file) => (dispatch, getState) => {\r\n  return dispatch(DeploymentActions.postProcessXML(filename, file))\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,wBAAZ,MAA0C,mCAA1C;AACA,OAAO,KAAKC,WAAZ,MAA6B,qBAA7B;AACA,OAAO,KAAKC,iBAAZ,MAAmC,2BAAnC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;EACrD,OAAOD,QAAQ,CAACH,WAAW,CAACK,UAAZ,EAAD,CAAf;AACD,CAFM;AAIP,OAAO,MAAMC,eAAe,GAAIC,MAAD,IAAY,CAACJ,QAAD,EAAWC,QAAX,KAAwB;EACjE,OAAOD,QAAQ,CAACH,WAAW,CAACQ,gBAAZ,CAA6BD,MAA7B,CAAD,CAAf;AACD,CAFM;AAIP,OAAO,MAAME,YAAY,GAAG,CAACF,MAAD,EAASG,MAAT,KAAoB,CAACP,QAAD,EAAWC,QAAX,KAAwB;EACtE,OAAOD,QAAQ,CAACH,WAAW,CAACW,cAAZ,CAA2BJ,MAA3B,EAAmCG,MAAnC,CAAD,CAAf;AACD,CAFM;AAIP,OAAO,MAAME,sBAAsB,GAAIC,mBAAD,IAAyB,CAACV,QAAD,EAAWC,QAAX,KAAwB;EACrF,OAAOD,QAAQ,CAACJ,wBAAwB,CAACe,uBAAzB,CAAiDD,mBAAjD,CAAD,CAAf;AACD,CAFM;AAIP,OAAO,MAAME,6BAA6B,GAAIF,mBAAD,IAAyB,CAACV,QAAD,EAAWC,QAAX,KAAwB;EAC5F,OAAOD,QAAQ,CAACJ,wBAAwB,CAACe,uBAAzB,CAAiDD,mBAAjD,CAAD,CAAR,CAAgFG,IAAhF,CAAsFC,IAAD,IAAU;IACpGA,IAAI,CAACC,QAAL,CAAcC,MAAd,CAAqBC,OAArB,CAA8BC,EAAD,IAAQ;MACnClB,QAAQ,CAACJ,wBAAwB,CAACuB,yBAAzB,CAAmDD,EAAnD,CAAD,CAAR;IACD,CAFD;EAID,CALM,CAAP;AAMD,CAPM;AASP,OAAO,MAAME,wBAAwB,GAAIV,mBAAD,IAAyB,CAACV,QAAD,EAAWC,QAAX,KAAwB;EACvF,OAAOD,QAAQ,CAACJ,wBAAwB,CAACuB,yBAAzB,CAAmDT,mBAAnD,CAAD,CAAf;AACD,CAFM;AAIP,OAAO,MAAMW,WAAW,GAAIC,oBAAD,IAA0B,CAACtB,QAAD,EAAWC,QAAX,KAAwB;EAC3E,OAAOD,QAAQ,CAACJ,wBAAwB,CAAC2B,YAAzB,CAAsCD,oBAAtC,CAAD,CAAf;AACD,CAFM;AAIP,OAAO,MAAME,oBAAoB,GAAG,CAACF,oBAAD,EAAuBf,MAAvB,KAAkC,CAACP,QAAD,EAAWC,QAAX,KAAwB;EAC5F,OAAOD,QAAQ,CAACJ,wBAAwB,CAAC6B,mBAAzB,CAA6CH,oBAA7C,EAAmEf,MAAnE,CAAD,CAAf;AACD,CAFM;AAIP,OAAO,MAAMmB,iBAAiB,GAAG,CAACtB,MAAD,EAASuB,aAAT,KAA2B,CAAC3B,QAAD,EAAWC,QAAX,KAAwB;EAClF,OAAOD,QAAQ,CAACH,WAAW,CAAC+B,kBAAZ,CAA+BxB,MAA/B,EAAuCuB,aAAvC,CAAD,CAAf;AACD,CAFM;AAIP,OAAO,MAAME,aAAa,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB,CAAC/B,QAAD,EAAWC,QAAX,KAAwB;EACvE,OAAOD,QAAQ,CAACF,iBAAiB,CAACkC,cAAlB,CAAiCF,QAAjC,EAA2CC,IAA3C,CAAD,CAAf;AACD,CAFM"},"metadata":{},"sourceType":"module"}