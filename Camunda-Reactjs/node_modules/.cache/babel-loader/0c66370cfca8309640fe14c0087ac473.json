{"ast":null,"code":"import { isNumber, assign, forEach, every, debounce, bind, reduce, find } from 'min-dash';\nimport { add as collectionAdd, remove as collectionRemove } from '../util/Collections';\nimport { getType, getBBox as getBoundingBox } from '../util/Elements';\nimport { asTRBL } from '../layout/LayoutUtil';\nimport { append as svgAppend, attr as svgAttr, classes as svgClasses, create as svgCreate, transform as svgTransform } from 'tiny-svg';\nimport { createMatrix } from 'tiny-svg';\n\nfunction round(number, resolution) {\n  return Math.round(number * resolution) / resolution;\n}\n\nfunction ensurePx(number) {\n  return isNumber(number) ? number + 'px' : number;\n}\n\nfunction findRoot(element) {\n  while (element.parent) {\n    element = element.parent;\n  }\n\n  return element;\n}\n/**\n * Creates a HTML container element for a SVG element with\n * the given configuration\n *\n * @param  {Object} options\n * @return {HTMLElement} the container element\n */\n\n\nfunction createContainer(options) {\n  options = assign({}, {\n    width: '100%',\n    height: '100%'\n  }, options);\n  var container = options.container || document.body; // create a <div> around the svg element with the respective size\n  // this way we can always get the correct container size\n  // (this is impossible for <svg> elements at the moment)\n\n  var parent = document.createElement('div');\n  parent.setAttribute('class', 'djs-container');\n  assign(parent.style, {\n    position: 'relative',\n    overflow: 'hidden',\n    width: ensurePx(options.width),\n    height: ensurePx(options.height)\n  });\n  container.appendChild(parent);\n  return parent;\n}\n\nfunction createGroup(parent, cls, childIndex) {\n  var group = svgCreate('g');\n  svgClasses(group).add(cls);\n  var index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1; // must ensure second argument is node or _null_\n  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n\n  parent.insertBefore(group, parent.childNodes[index] || null);\n  return group;\n}\n\nvar BASE_LAYER = 'base';\nvar HIDDEN_MARKER = 'djs-element-hidden'; // render plane contents behind utility layers\n\nvar PLANE_LAYER_INDEX = 0;\nvar UTILITY_LAYER_INDEX = 1;\nvar REQUIRED_MODEL_ATTRS = {\n  shape: ['x', 'y', 'width', 'height'],\n  connection: ['waypoints']\n};\n/**\n * The main drawing canvas.\n *\n * @class\n * @constructor\n *\n * @emits Canvas#canvas.init\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {GraphicsFactory} graphicsFactory\n * @param {ElementRegistry} elementRegistry\n */\n\nexport default function Canvas(config, eventBus, graphicsFactory, elementRegistry) {\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n\n  this._init(config || {});\n}\nCanvas.$inject = ['config.canvas', 'eventBus', 'graphicsFactory', 'elementRegistry'];\n/**\n * Creates a <svg> element that is wrapped into a <div>.\n * This way we are always able to correctly figure out the size of the svg element\n * by querying the parent node.\n\n * (It is not possible to get the size of a svg element cross browser @ 2014-04-01)\n\n * <div class=\"djs-container\" style=\"width: {desired-width}, height: {desired-height}\">\n *   <svg width=\"100%\" height=\"100%\">\n *    ...\n *   </svg>\n * </div>\n */\n\nCanvas.prototype._init = function (config) {\n  var eventBus = this._eventBus; // html container\n\n  var container = this._container = createContainer(config);\n  var svg = this._svg = svgCreate('svg');\n  svgAttr(svg, {\n    width: '100%',\n    height: '100%'\n  });\n  svgAppend(container, svg);\n  var viewport = this._viewport = createGroup(svg, 'viewport');\n  this._layers = {};\n  this._planes = {}; // debounce canvas.viewbox.changed events\n  // for smoother diagram interaction\n\n  if (config.deferUpdate !== false) {\n    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);\n  }\n\n  eventBus.on('diagram.init', function () {\n    /**\n     * An event indicating that the canvas is ready to be drawn on.\n     *\n     * @memberOf Canvas\n     *\n     * @event canvas.init\n     *\n     * @type {Object}\n     * @property {SVGElement} svg the created svg element\n     * @property {SVGElement} viewport the direct parent of diagram elements and shapes\n     */\n    eventBus.fire('canvas.init', {\n      svg: svg,\n      viewport: viewport\n    });\n  }, this); // reset viewbox on shape changes to\n  // recompute the viewbox\n\n  eventBus.on(['shape.added', 'connection.added', 'shape.removed', 'connection.removed', 'elements.changed', 'plane.set'], function () {\n    delete this._cachedViewbox;\n  }, this);\n  eventBus.on('diagram.destroy', 500, this._destroy, this);\n  eventBus.on('diagram.clear', 500, this._clear, this);\n};\n\nCanvas.prototype._destroy = function (emit) {\n  this._eventBus.fire('canvas.destroy', {\n    svg: this._svg,\n    viewport: this._viewport\n  });\n\n  var parent = this._container.parentNode;\n\n  if (parent) {\n    parent.removeChild(this._container);\n  }\n\n  delete this._svg;\n  delete this._container;\n  delete this._layers;\n  delete this._planes;\n  delete this._activePlane;\n  delete this._viewport;\n};\n\nCanvas.prototype._clear = function () {\n  var self = this;\n\n  var allElements = this._elementRegistry.getAll(); // remove all elements\n\n\n  allElements.forEach(function (element) {\n    var type = getType(element);\n\n    if (type === 'root') {\n      self.setRootElementForPlane(null, self.findPlane(element), true);\n    } else {\n      self._removeElement(element, type);\n    }\n  }); // remove all planes\n\n  this._activePlane = null;\n  this._planes = {}; // force recomputation of view box\n\n  delete this._cachedViewbox;\n};\n/**\n * Returns the default layer on which\n * all elements are drawn.\n *\n * @returns {SVGElement}\n */\n\n\nCanvas.prototype.getDefaultLayer = function () {\n  return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);\n};\n/**\n * Returns a layer that is used to draw elements\n * or annotations on it.\n *\n * Non-existing layers retrieved through this method\n * will be created. During creation, the optional index\n * may be used to create layers below or above existing layers.\n * A layer with a certain index is always created above all\n * existing layers with the same index.\n *\n * @param {string} name\n * @param {number} index\n *\n * @returns {SVGElement}\n */\n\n\nCanvas.prototype.getLayer = function (name, index) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  var layer = this._layers[name];\n\n  if (!layer) {\n    layer = this._layers[name] = this._createLayer(name, index);\n  } // throw an error if layer creation / retrival is\n  // requested on different index\n\n\n  if (typeof index !== 'undefined' && layer.index !== index) {\n    throw new Error('layer <' + name + '> already created at index <' + index + '>');\n  }\n\n  return layer.group;\n};\n/**\n * Creates a given layer and returns it.\n *\n * @param {string} name\n * @param {number} [index=0]\n *\n * @return {Object} layer descriptor with { index, group: SVGGroup }\n */\n\n\nCanvas.prototype._createLayer = function (name, index) {\n  if (typeof index === 'undefined') {\n    index = UTILITY_LAYER_INDEX;\n  }\n\n  var childIndex = reduce(this._layers, function (childIndex, layer) {\n    if (index >= layer.index) {\n      childIndex++;\n    }\n\n    return childIndex;\n  }, 0);\n  return {\n    group: createGroup(this._viewport, 'layer-' + name, childIndex),\n    index: index\n  };\n};\n/**\n * Returns a plane that is used to draw elements on it.\n *\n * @param {string} name\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\n\n\nCanvas.prototype.getPlane = function (name) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  return this._planes[name];\n};\n/**\n * Creates a plane that is used to draw elements on it. If no\n * root element is provided, an implicit root will be used.\n *\n * @param {string} name\n * @param {Object|djs.model.Root} [rootElement] optional root element\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\n\n\nCanvas.prototype.createPlane = function (name, rootElement) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  if (this._planes[name]) {\n    throw new Error('plane ' + name + ' already exists');\n  }\n\n  if (!rootElement) {\n    rootElement = {\n      id: '__implicitroot' + name,\n      children: [],\n      isImplicit: true\n    };\n  }\n\n  var svgLayer = this.getLayer(name, PLANE_LAYER_INDEX);\n  svgClasses(svgLayer).add(HIDDEN_MARKER);\n  var plane = this._planes[name] = {\n    layer: svgLayer,\n    name: name,\n    rootElement: null\n  };\n  this.setRootElementForPlane(rootElement, plane);\n  return plane;\n};\n/**\n * Sets the active plane and hides the previously active plane.\n *\n * @param {string|Object} plane\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\n\n\nCanvas.prototype.setActivePlane = function (plane) {\n  if (!plane) {\n    throw new Error('must specify a plane');\n  }\n\n  if (typeof plane === 'string') {\n    plane = this.getPlane(plane);\n  } // hide previous Plane\n\n\n  if (this._activePlane) {\n    svgClasses(this._activePlane.layer).add(HIDDEN_MARKER);\n  }\n\n  this._activePlane = plane; // show current Plane\n\n  svgClasses(plane.layer).remove(HIDDEN_MARKER);\n\n  if (plane.rootElement) {\n    this._elementRegistry.updateGraphics(plane.rootElement, this._svg, true);\n  }\n\n  this._eventBus.fire('plane.set', {\n    plane: plane\n  });\n\n  return plane;\n};\n/**\n * Returns the currently active layer\n *\n * @returns {SVGElement}\n */\n\n\nCanvas.prototype.getActiveLayer = function () {\n  return this.getActivePlane().layer;\n};\n/**\n * Returns the currently active plane.\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\n\n\nCanvas.prototype.getActivePlane = function () {\n  var plane = this._activePlane;\n\n  if (!plane) {\n    plane = this.createPlane(BASE_LAYER);\n    this.setActivePlane(BASE_LAYER);\n  }\n\n  return plane;\n};\n/**\n * Returns the plane which contains the given element.\n *\n * @param {string|djs.model.Base} element\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\n\n\nCanvas.prototype.findPlane = function (element) {\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  var root = findRoot(element);\n  return find(this._planes, function (plane) {\n    return plane.rootElement === root;\n  });\n};\n/**\n * Returns the html element that encloses the\n * drawing canvas.\n *\n * @return {DOMNode}\n */\n\n\nCanvas.prototype.getContainer = function () {\n  return this._container;\n}; // markers //////////////////////\n\n\nCanvas.prototype._updateMarker = function (element, marker, add) {\n  var container;\n\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  } // we need to access all\n\n\n  container = this._elementRegistry._elements[element.id];\n\n  if (!container) {\n    return;\n  }\n\n  forEach([container.gfx, container.secondaryGfx], function (gfx) {\n    if (gfx) {\n      // invoke either addClass or removeClass based on mode\n      if (add) {\n        svgClasses(gfx).add(marker);\n      } else {\n        svgClasses(gfx).remove(marker);\n      }\n    }\n  });\n  /**\n   * An event indicating that a marker has been updated for an element\n   *\n   * @event element.marker.update\n   * @type {Object}\n   * @property {djs.model.Element} element the shape\n   * @property {Object} gfx the graphical representation of the shape\n   * @property {string} marker\n   * @property {boolean} add true if the marker was added, false if it got removed\n   */\n\n  this._eventBus.fire('element.marker.update', {\n    element: element,\n    gfx: container.gfx,\n    marker: marker,\n    add: !!add\n  });\n};\n/**\n * Adds a marker to an element (basically a css class).\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @example\n * canvas.addMarker('foo', 'some-marker');\n *\n * var fooGfx = canvas.getGraphics('foo');\n *\n * fooGfx; // <g class=\"... some-marker\"> ... </g>\n *\n * @param {string|djs.model.Base} element\n * @param {string} marker\n */\n\n\nCanvas.prototype.addMarker = function (element, marker) {\n  this._updateMarker(element, marker, true);\n};\n/**\n * Remove a marker from an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\n\n\nCanvas.prototype.removeMarker = function (element, marker) {\n  this._updateMarker(element, marker, false);\n};\n/**\n * Check the existence of a marker on element.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\n\n\nCanvas.prototype.hasMarker = function (element, marker) {\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  var gfx = this.getGraphics(element);\n  return svgClasses(gfx).has(marker);\n};\n/**\n * Toggles a marker on an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\n\n\nCanvas.prototype.toggleMarker = function (element, marker) {\n  if (this.hasMarker(element, marker)) {\n    this.removeMarker(element, marker);\n  } else {\n    this.addMarker(element, marker);\n  }\n};\n\nCanvas.prototype.getRootElement = function () {\n  var plane = this.getActivePlane();\n  return plane.rootElement;\n}; // root element handling //////////////////////\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} element\n * @param {boolean} [override] whether to override the current root element, if any\n *\n * @return {Object|djs.model.Root} new root element\n */\n\n\nCanvas.prototype.setRootElement = function (element, override) {\n  var activePlane = this._activePlane;\n\n  if (activePlane) {\n    return this.setRootElementForPlane(element, activePlane, override);\n  } else {\n    var basePlane = this.createPlane(BASE_LAYER, element);\n    this.setActivePlane(basePlane);\n    return basePlane.rootElement;\n  }\n};\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} element\n * @param {Object|djs.model.Root} plane\n * @param {boolean} [override] whether to override the current root element, if any\n *\n * @return {Object|djs.model.Root} new root element\n */\n\n\nCanvas.prototype.setRootElementForPlane = function (element, plane, override) {\n  if (typeof plane === 'string') {\n    plane = this.getPlane(plane);\n  }\n\n  if (element) {\n    this._ensureValid('root', element);\n  }\n\n  var currentRoot = plane.rootElement,\n      elementRegistry = this._elementRegistry,\n      eventBus = this._eventBus;\n\n  if (currentRoot) {\n    if (!override) {\n      throw new Error('rootElement already set, need to specify override');\n    } // simulate element remove event sequence\n\n\n    eventBus.fire('root.remove', {\n      element: currentRoot\n    });\n    eventBus.fire('root.removed', {\n      element: currentRoot\n    });\n    elementRegistry.remove(currentRoot);\n  }\n\n  if (element) {\n    var gfx = plane.layer; // resemble element add event sequence\n\n    eventBus.fire('root.add', {\n      element: element\n    });\n    elementRegistry.add(element, gfx);\n    eventBus.fire('root.added', {\n      element: element,\n      gfx: gfx\n    }); // associate SVG with root element when active\n\n    if (plane === this._activePlane) {\n      this._elementRegistry.updateGraphics(element, this._svg, true);\n    }\n  }\n\n  plane.rootElement = element;\n  return element;\n}; // add functionality //////////////////////\n\n\nCanvas.prototype._ensureValid = function (type, element) {\n  if (!element.id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elementRegistry.get(element.id)) {\n    throw new Error('element with id ' + element.id + ' already exists');\n  }\n\n  var requiredAttrs = REQUIRED_MODEL_ATTRS[type];\n  var valid = every(requiredAttrs, function (attr) {\n    return typeof element[attr] !== 'undefined';\n  });\n\n  if (!valid) {\n    throw new Error('must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);\n  }\n};\n\nCanvas.prototype._setParent = function (element, parent, parentIndex) {\n  collectionAdd(parent.children, element, parentIndex);\n  element.parent = parent;\n};\n/**\n * Adds an element to the canvas.\n *\n * This wires the parent <-> child relationship between the element and\n * a explicitly specified parent or an implicit root element.\n *\n * During add it emits the events\n *\n *  * <{type}.add> (element, parent)\n *  * <{type}.added> (element, gfx)\n *\n * Extensions may hook into these events to perform their magic.\n *\n * @param {string} type\n * @param {Object|djs.model.Base} element\n * @param {Object|djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {Object|djs.model.Base} the added element\n */\n\n\nCanvas.prototype._addElement = function (type, element, parent, parentIndex) {\n  parent = parent || this.getRootElement();\n  var eventBus = this._eventBus,\n      graphicsFactory = this._graphicsFactory;\n\n  this._ensureValid(type, element);\n\n  eventBus.fire(type + '.add', {\n    element: element,\n    parent: parent\n  });\n\n  this._setParent(element, parent, parentIndex); // create graphics\n\n\n  var gfx = graphicsFactory.create(type, element, parentIndex);\n\n  this._elementRegistry.add(element, gfx); // update its visual\n\n\n  graphicsFactory.update(type, element, gfx);\n  eventBus.fire(type + '.added', {\n    element: element,\n    gfx: gfx\n  });\n  return element;\n};\n/**\n * Adds a shape to the canvas\n *\n * @param {Object|djs.model.Shape} shape to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Shape} the added shape\n */\n\n\nCanvas.prototype.addShape = function (shape, parent, parentIndex) {\n  return this._addElement('shape', shape, parent, parentIndex);\n};\n/**\n * Adds a connection to the canvas\n *\n * @param {Object|djs.model.Connection} connection to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Connection} the added connection\n */\n\n\nCanvas.prototype.addConnection = function (connection, parent, parentIndex) {\n  return this._addElement('connection', connection, parent, parentIndex);\n};\n/**\n * Internal remove element\n */\n\n\nCanvas.prototype._removeElement = function (element, type) {\n  var elementRegistry = this._elementRegistry,\n      graphicsFactory = this._graphicsFactory,\n      eventBus = this._eventBus;\n  element = elementRegistry.get(element.id || element);\n\n  if (!element) {\n    // element was removed already\n    return;\n  }\n\n  eventBus.fire(type + '.remove', {\n    element: element\n  });\n  graphicsFactory.remove(element); // unset parent <-> child relationship\n\n  collectionRemove(element.parent && element.parent.children, element);\n  element.parent = null;\n  eventBus.fire(type + '.removed', {\n    element: element\n  });\n  elementRegistry.remove(element);\n  return element;\n};\n/**\n * Removes a shape from the canvas\n *\n * @param {string|djs.model.Shape} shape or shape id to be removed\n *\n * @return {djs.model.Shape} the removed shape\n */\n\n\nCanvas.prototype.removeShape = function (shape) {\n  /**\n   * An event indicating that a shape is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.remove\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n\n  /**\n   * An event indicating that a shape has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.removed\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n  return this._removeElement(shape, 'shape');\n};\n/**\n * Removes a connection from the canvas\n *\n * @param {string|djs.model.Connection} connection or connection id to be removed\n *\n * @return {djs.model.Connection} the removed connection\n */\n\n\nCanvas.prototype.removeConnection = function (connection) {\n  /**\n   * An event indicating that a connection is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.remove\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n\n  /**\n   * An event indicating that a connection has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.removed\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n  return this._removeElement(connection, 'connection');\n};\n/**\n * Return the graphical object underlaying a certain diagram element\n *\n * @param {string|djs.model.Base} element descriptor of the element\n * @param {boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\n\n\nCanvas.prototype.getGraphics = function (element, secondary) {\n  return this._elementRegistry.getGraphics(element, secondary);\n};\n/**\n * Perform a viewbox update via a given change function.\n *\n * @param {Function} changeFn\n */\n\n\nCanvas.prototype._changeViewbox = function (changeFn) {\n  // notify others of the upcoming viewbox change\n  this._eventBus.fire('canvas.viewbox.changing'); // perform actual change\n\n\n  changeFn.apply(this); // reset the cached viewbox so that\n  // a new get operation on viewbox or zoom\n  // triggers a viewbox re-computation\n\n  this._cachedViewbox = null; // notify others of the change; this step\n  // may or may not be debounced\n\n  this._viewboxChanged();\n};\n\nCanvas.prototype._viewboxChanged = function () {\n  this._eventBus.fire('canvas.viewbox.changed', {\n    viewbox: this.viewbox()\n  });\n};\n/**\n * Gets or sets the view box of the canvas, i.e. the\n * area that is currently displayed.\n *\n * The getter may return a cached viewbox (if it is currently\n * changing). To force a recomputation, pass `false` as the first argument.\n *\n * @example\n *\n * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })\n *\n * // sets the visible area of the diagram to (100|100) -> (600|100)\n * // and and scales it according to the diagram width\n *\n * var viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.\n *\n * console.log(viewbox);\n * // {\n * //   inner: Dimensions,\n * //   outer: Dimensions,\n * //   scale,\n * //   x, y,\n * //   width, height\n * // }\n *\n * // if the current diagram is zoomed and scrolled, you may reset it to the\n * // default zoom via this method, too:\n *\n * var zoomedAndScrolledViewbox = canvas.viewbox();\n *\n * canvas.viewbox({\n *   x: 0,\n *   y: 0,\n *   width: zoomedAndScrolledViewbox.outer.width,\n *   height: zoomedAndScrolledViewbox.outer.height\n * });\n *\n * @param  {Object} [box] the new view box to set\n * @param  {number} box.x the top left X coordinate of the canvas visible in view box\n * @param  {number} box.y the top left Y coordinate of the canvas visible in view box\n * @param  {number} box.width the visible width\n * @param  {number} box.height\n *\n * @return {Object} the current view box\n */\n\n\nCanvas.prototype.viewbox = function (box) {\n  if (box === undefined && this._cachedViewbox) {\n    return this._cachedViewbox;\n  }\n\n  var viewport = this._viewport,\n      innerBox,\n      outerBox = this.getSize(),\n      matrix,\n      transform,\n      scale,\n      x,\n      y;\n\n  if (!box) {\n    // compute the inner box based on the\n    // diagrams active plane. This allows us to exclude\n    // external components, such as overlays\n    innerBox = this._activePlane && this._activePlane.layer.getBBox() || {};\n    transform = svgTransform(viewport);\n    matrix = transform ? transform.matrix : createMatrix();\n    scale = round(matrix.a, 1000);\n    x = round(-matrix.e || 0, 1000);\n    y = round(-matrix.f || 0, 1000);\n    box = this._cachedViewbox = {\n      x: x ? x / scale : 0,\n      y: y ? y / scale : 0,\n      width: outerBox.width / scale,\n      height: outerBox.height / scale,\n      scale: scale,\n      inner: {\n        width: innerBox.width || 0,\n        height: innerBox.height || 0,\n        x: innerBox.x || 0,\n        y: innerBox.y || 0\n      },\n      outer: outerBox\n    };\n    return box;\n  } else {\n    this._changeViewbox(function () {\n      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);\n\n      var matrix = this._svg.createSVGMatrix().scale(scale).translate(-box.x, -box.y);\n\n      svgTransform(viewport, matrix);\n    });\n  }\n\n  return box;\n};\n/**\n * Gets or sets the scroll of the canvas.\n *\n * @param {Object} [delta] the new scroll to apply.\n *\n * @param {number} [delta.dx]\n * @param {number} [delta.dy]\n */\n\n\nCanvas.prototype.scroll = function (delta) {\n  var node = this._viewport;\n  var matrix = node.getCTM();\n\n  if (delta) {\n    this._changeViewbox(function () {\n      delta = assign({\n        dx: 0,\n        dy: 0\n      }, delta || {});\n      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);\n      setCTM(node, matrix);\n    });\n  }\n\n  return {\n    x: matrix.e,\n    y: matrix.f\n  };\n};\n/**\n * Scrolls the viewbox to contain the given element.\n * Optionally specify a padding to be applied to the edges.\n *\n * @param {Object|String} [element] the element to scroll to.\n * @param {Object|Number} [padding=100] the padding to be applied. Can also specify top, bottom, left and right.\n *\n */\n\n\nCanvas.prototype.scrollToElement = function (element, padding) {\n  var defaultPadding = 100;\n\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  } // switch to correct Plane\n\n\n  var targetPlane = this.findPlane(element);\n\n  if (targetPlane !== this._activePlane) {\n    this.setActivePlane(targetPlane);\n  }\n\n  if (!padding) {\n    padding = {};\n  }\n\n  if (typeof padding === 'number') {\n    defaultPadding = padding;\n  }\n\n  padding = {\n    top: padding.top || defaultPadding,\n    right: padding.right || defaultPadding,\n    bottom: padding.bottom || defaultPadding,\n    left: padding.left || defaultPadding\n  };\n  var elementBounds = getBoundingBox(element),\n      elementTrbl = asTRBL(elementBounds),\n      viewboxBounds = this.viewbox(),\n      zoom = this.zoom(),\n      dx,\n      dy; // shrink viewboxBounds with padding\n\n  viewboxBounds.y += padding.top / zoom;\n  viewboxBounds.x += padding.left / zoom;\n  viewboxBounds.width -= (padding.right + padding.left) / zoom;\n  viewboxBounds.height -= (padding.bottom + padding.top) / zoom;\n  var viewboxTrbl = asTRBL(viewboxBounds);\n  var canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;\n\n  if (!canFit) {\n    // top-left when element can't fit\n    dx = elementBounds.x - viewboxBounds.x;\n    dy = elementBounds.y - viewboxBounds.y;\n  } else {\n    var dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right),\n        dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left),\n        dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom),\n        dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);\n    dx = dRight || dLeft;\n    dy = dBottom || dTop;\n  }\n\n  this.scroll({\n    dx: -dx * zoom,\n    dy: -dy * zoom\n  });\n};\n/**\n * Gets or sets the current zoom of the canvas, optionally zooming\n * to the specified position.\n *\n * The getter may return a cached zoom level. Call it with `false` as\n * the first argument to force recomputation of the current level.\n *\n * @param {string|number} [newScale] the new zoom level, either a number, i.e. 0.9,\n *                                   or `fit-viewport` to adjust the size to fit the current viewport\n * @param {string|Point} [center] the reference point { x: .., y: ..} to zoom to, 'auto' to zoom into mid or null\n *\n * @return {number} the current scale\n */\n\n\nCanvas.prototype.zoom = function (newScale, center) {\n  if (!newScale) {\n    return this.viewbox(newScale).scale;\n  }\n\n  if (newScale === 'fit-viewport') {\n    return this._fitViewport(center);\n  }\n\n  var outer, matrix;\n\n  this._changeViewbox(function () {\n    if (typeof center !== 'object') {\n      outer = this.viewbox().outer;\n      center = {\n        x: outer.width / 2,\n        y: outer.height / 2\n      };\n    }\n\n    matrix = this._setZoom(newScale, center);\n  });\n\n  return round(matrix.a, 1000);\n};\n\nfunction setCTM(node, m) {\n  var mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n  node.setAttribute('transform', mstr);\n}\n\nCanvas.prototype._fitViewport = function (center) {\n  var vbox = this.viewbox(),\n      outer = vbox.outer,\n      inner = vbox.inner,\n      newScale,\n      newViewbox; // display the complete diagram without zooming in.\n  // instead of relying on internal zoom, we perform a\n  // hard reset on the canvas viewbox to realize this\n  //\n  // if diagram does not need to be zoomed in, we focus it around\n  // the diagram origin instead\n\n  if (inner.x >= 0 && inner.y >= 0 && inner.x + inner.width <= outer.width && inner.y + inner.height <= outer.height && !center) {\n    newViewbox = {\n      x: 0,\n      y: 0,\n      width: Math.max(inner.width + inner.x, outer.width),\n      height: Math.max(inner.height + inner.y, outer.height)\n    };\n  } else {\n    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);\n    newViewbox = {\n      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),\n      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),\n      width: outer.width / newScale,\n      height: outer.height / newScale\n    };\n  }\n\n  this.viewbox(newViewbox);\n  return this.viewbox(false).scale;\n};\n\nCanvas.prototype._setZoom = function (scale, center) {\n  var svg = this._svg,\n      viewport = this._viewport;\n  var matrix = svg.createSVGMatrix();\n  var point = svg.createSVGPoint();\n  var centerPoint, originalPoint, currentMatrix, scaleMatrix, newMatrix;\n  currentMatrix = viewport.getCTM();\n  var currentScale = currentMatrix.a;\n\n  if (center) {\n    centerPoint = assign(point, center); // revert applied viewport transformations\n\n    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse()); // create scale matrix\n\n    scaleMatrix = matrix.translate(originalPoint.x, originalPoint.y).scale(1 / currentScale * scale).translate(-originalPoint.x, -originalPoint.y);\n    newMatrix = currentMatrix.multiply(scaleMatrix);\n  } else {\n    newMatrix = matrix.scale(scale);\n  }\n\n  setCTM(this._viewport, newMatrix);\n  return newMatrix;\n};\n/**\n * Returns the size of the canvas\n *\n * @return {Dimensions}\n */\n\n\nCanvas.prototype.getSize = function () {\n  return {\n    width: this._container.clientWidth,\n    height: this._container.clientHeight\n  };\n};\n/**\n * Return the absolute bounding box for the given element\n *\n * The absolute bounding box may be used to display overlays in the\n * callers (browser) coordinate system rather than the zoomed in/out\n * canvas coordinates.\n *\n * @param  {ElementDescriptor} element\n * @return {Bounds} the absolute bounding box\n */\n\n\nCanvas.prototype.getAbsoluteBBox = function (element) {\n  var vbox = this.viewbox();\n  var bbox; // connection\n  // use svg bbox\n\n  if (element.waypoints) {\n    var gfx = this.getGraphics(element);\n    bbox = gfx.getBBox();\n  } // shapes\n  // use data\n  else {\n    bbox = element;\n  }\n\n  var x = bbox.x * vbox.scale - vbox.x * vbox.scale;\n  var y = bbox.y * vbox.scale - vbox.y * vbox.scale;\n  var width = bbox.width * vbox.scale;\n  var height = bbox.height * vbox.scale;\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n/**\n * Fires an event in order other modules can react to the\n * canvas resizing\n */\n\n\nCanvas.prototype.resized = function () {\n  // force recomputation of view box\n  delete this._cachedViewbox;\n\n  this._eventBus.fire('canvas.resized');\n};","map":{"version":3,"names":["isNumber","assign","forEach","every","debounce","bind","reduce","find","add","collectionAdd","remove","collectionRemove","getType","getBBox","getBoundingBox","asTRBL","append","svgAppend","attr","svgAttr","classes","svgClasses","create","svgCreate","transform","svgTransform","createMatrix","round","number","resolution","Math","ensurePx","findRoot","element","parent","createContainer","options","width","height","container","document","body","createElement","setAttribute","style","position","overflow","appendChild","createGroup","cls","childIndex","group","index","undefined","childNodes","length","insertBefore","BASE_LAYER","HIDDEN_MARKER","PLANE_LAYER_INDEX","UTILITY_LAYER_INDEX","REQUIRED_MODEL_ATTRS","shape","connection","Canvas","config","eventBus","graphicsFactory","elementRegistry","_eventBus","_elementRegistry","_graphicsFactory","_init","$inject","prototype","_container","svg","_svg","viewport","_viewport","_layers","_planes","deferUpdate","_viewboxChanged","on","fire","_cachedViewbox","_destroy","_clear","emit","parentNode","removeChild","_activePlane","self","allElements","getAll","type","setRootElementForPlane","findPlane","_removeElement","getDefaultLayer","getLayer","name","Error","layer","_createLayer","getPlane","createPlane","rootElement","id","children","isImplicit","svgLayer","plane","setActivePlane","updateGraphics","getActiveLayer","getActivePlane","get","root","getContainer","_updateMarker","marker","_elements","gfx","secondaryGfx","addMarker","removeMarker","hasMarker","getGraphics","has","toggleMarker","getRootElement","setRootElement","override","activePlane","basePlane","_ensureValid","currentRoot","requiredAttrs","valid","join","_setParent","parentIndex","_addElement","update","addShape","addConnection","removeShape","removeConnection","secondary","_changeViewbox","changeFn","apply","viewbox","box","innerBox","outerBox","getSize","matrix","scale","x","y","a","e","f","inner","outer","min","createSVGMatrix","translate","scroll","delta","node","getCTM","dx","dy","multiply","setCTM","scrollToElement","padding","defaultPadding","targetPlane","top","right","bottom","left","elementBounds","elementTrbl","viewboxBounds","zoom","viewboxTrbl","canFit","dRight","max","dLeft","dBottom","dTop","newScale","center","_fitViewport","_setZoom","m","mstr","b","c","d","vbox","newViewbox","point","createSVGPoint","centerPoint","originalPoint","currentMatrix","scaleMatrix","newMatrix","currentScale","matrixTransform","inverse","clientWidth","clientHeight","getAbsoluteBBox","bbox","waypoints","resized"],"sources":["D:/projects/Camunda/rpsboacamundajul2022/Camunda-Reactjs/node_modules/diagram-js/lib/core/Canvas.js"],"sourcesContent":["import {\n  isNumber,\n  assign,\n  forEach,\n  every,\n  debounce,\n  bind,\n  reduce,\n  find\n} from 'min-dash';\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from '../util/Collections';\n\nimport {\n  getType,\n  getBBox as getBoundingBox\n} from '../util/Elements';\n\nimport { asTRBL } from '../layout/LayoutUtil';\n\nimport {\n  append as svgAppend,\n  attr as svgAttr,\n  classes as svgClasses,\n  create as svgCreate,\n  transform as svgTransform\n} from 'tiny-svg';\n\nimport { createMatrix as createMatrix } from 'tiny-svg';\n\n\nfunction round(number, resolution) {\n  return Math.round(number * resolution) / resolution;\n}\n\nfunction ensurePx(number) {\n  return isNumber(number) ? number + 'px' : number;\n}\n\nfunction findRoot(element) {\n  while (element.parent) {\n    element = element.parent;\n  }\n\n  return element;\n}\n\n/**\n * Creates a HTML container element for a SVG element with\n * the given configuration\n *\n * @param  {Object} options\n * @return {HTMLElement} the container element\n */\nfunction createContainer(options) {\n\n  options = assign({}, { width: '100%', height: '100%' }, options);\n\n  var container = options.container || document.body;\n\n  // create a <div> around the svg element with the respective size\n  // this way we can always get the correct container size\n  // (this is impossible for <svg> elements at the moment)\n  var parent = document.createElement('div');\n  parent.setAttribute('class', 'djs-container');\n\n  assign(parent.style, {\n    position: 'relative',\n    overflow: 'hidden',\n    width: ensurePx(options.width),\n    height: ensurePx(options.height)\n  });\n\n  container.appendChild(parent);\n\n  return parent;\n}\n\nfunction createGroup(parent, cls, childIndex) {\n  var group = svgCreate('g');\n  svgClasses(group).add(cls);\n\n  var index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;\n\n  // must ensure second argument is node or _null_\n  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n  parent.insertBefore(group, parent.childNodes[index] || null);\n\n  return group;\n}\n\nvar BASE_LAYER = 'base';\nvar HIDDEN_MARKER = 'djs-element-hidden';\n\n// render plane contents behind utility layers\nvar PLANE_LAYER_INDEX = 0;\nvar UTILITY_LAYER_INDEX = 1;\n\n\nvar REQUIRED_MODEL_ATTRS = {\n  shape: [ 'x', 'y', 'width', 'height' ],\n  connection: [ 'waypoints' ]\n};\n\n/**\n * The main drawing canvas.\n *\n * @class\n * @constructor\n *\n * @emits Canvas#canvas.init\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {GraphicsFactory} graphicsFactory\n * @param {ElementRegistry} elementRegistry\n */\nexport default function Canvas(config, eventBus, graphicsFactory, elementRegistry) {\n\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n\n  this._init(config || {});\n}\n\nCanvas.$inject = [\n  'config.canvas',\n  'eventBus',\n  'graphicsFactory',\n  'elementRegistry'\n];\n\n/**\n * Creates a <svg> element that is wrapped into a <div>.\n * This way we are always able to correctly figure out the size of the svg element\n * by querying the parent node.\n\n * (It is not possible to get the size of a svg element cross browser @ 2014-04-01)\n\n * <div class=\"djs-container\" style=\"width: {desired-width}, height: {desired-height}\">\n *   <svg width=\"100%\" height=\"100%\">\n *    ...\n *   </svg>\n * </div>\n */\nCanvas.prototype._init = function(config) {\n\n  var eventBus = this._eventBus;\n\n  // html container\n  var container = this._container = createContainer(config);\n\n  var svg = this._svg = svgCreate('svg');\n  svgAttr(svg, { width: '100%', height: '100%' });\n\n  svgAppend(container, svg);\n\n  var viewport = this._viewport = createGroup(svg, 'viewport');\n\n  this._layers = {};\n  this._planes = {};\n\n  // debounce canvas.viewbox.changed events\n  // for smoother diagram interaction\n  if (config.deferUpdate !== false) {\n    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);\n  }\n\n  eventBus.on('diagram.init', function() {\n\n    /**\n     * An event indicating that the canvas is ready to be drawn on.\n     *\n     * @memberOf Canvas\n     *\n     * @event canvas.init\n     *\n     * @type {Object}\n     * @property {SVGElement} svg the created svg element\n     * @property {SVGElement} viewport the direct parent of diagram elements and shapes\n     */\n    eventBus.fire('canvas.init', {\n      svg: svg,\n      viewport: viewport\n    });\n\n  }, this);\n\n  // reset viewbox on shape changes to\n  // recompute the viewbox\n  eventBus.on([\n    'shape.added',\n    'connection.added',\n    'shape.removed',\n    'connection.removed',\n    'elements.changed',\n    'plane.set'\n  ], function() {\n    delete this._cachedViewbox;\n  }, this);\n\n  eventBus.on('diagram.destroy', 500, this._destroy, this);\n  eventBus.on('diagram.clear', 500, this._clear, this);\n};\n\nCanvas.prototype._destroy = function(emit) {\n  this._eventBus.fire('canvas.destroy', {\n    svg: this._svg,\n    viewport: this._viewport\n  });\n\n  var parent = this._container.parentNode;\n\n  if (parent) {\n    parent.removeChild(this._container);\n  }\n\n  delete this._svg;\n  delete this._container;\n  delete this._layers;\n  delete this._planes;\n  delete this._activePlane;\n  delete this._viewport;\n};\n\nCanvas.prototype._clear = function() {\n\n  var self = this;\n\n  var allElements = this._elementRegistry.getAll();\n\n  // remove all elements\n  allElements.forEach(function(element) {\n    var type = getType(element);\n\n    if (type === 'root') {\n      self.setRootElementForPlane(null, self.findPlane(element), true);\n    } else {\n      self._removeElement(element, type);\n    }\n  });\n\n  // remove all planes\n  this._activePlane = null;\n  this._planes = {};\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n};\n\n/**\n * Returns the default layer on which\n * all elements are drawn.\n *\n * @returns {SVGElement}\n */\nCanvas.prototype.getDefaultLayer = function() {\n  return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);\n};\n\n/**\n * Returns a layer that is used to draw elements\n * or annotations on it.\n *\n * Non-existing layers retrieved through this method\n * will be created. During creation, the optional index\n * may be used to create layers below or above existing layers.\n * A layer with a certain index is always created above all\n * existing layers with the same index.\n *\n * @param {string} name\n * @param {number} index\n *\n * @returns {SVGElement}\n */\nCanvas.prototype.getLayer = function(name, index) {\n\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  var layer = this._layers[name];\n\n  if (!layer) {\n    layer = this._layers[name] = this._createLayer(name, index);\n  }\n\n  // throw an error if layer creation / retrival is\n  // requested on different index\n  if (typeof index !== 'undefined' && layer.index !== index) {\n    throw new Error('layer <' + name + '> already created at index <' + index + '>');\n  }\n\n  return layer.group;\n};\n\n/**\n * Creates a given layer and returns it.\n *\n * @param {string} name\n * @param {number} [index=0]\n *\n * @return {Object} layer descriptor with { index, group: SVGGroup }\n */\nCanvas.prototype._createLayer = function(name, index) {\n\n  if (typeof index === 'undefined') {\n    index = UTILITY_LAYER_INDEX;\n  }\n\n  var childIndex = reduce(this._layers, function(childIndex, layer) {\n    if (index >= layer.index) {\n      childIndex++;\n    }\n\n    return childIndex;\n  }, 0);\n\n  return {\n    group: createGroup(this._viewport, 'layer-' + name, childIndex),\n    index: index\n  };\n\n};\n\n/**\n * Returns a plane that is used to draw elements on it.\n *\n * @param {string} name\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.getPlane = function(name) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  return this._planes[name];\n};\n\n/**\n * Creates a plane that is used to draw elements on it. If no\n * root element is provided, an implicit root will be used.\n *\n * @param {string} name\n * @param {Object|djs.model.Root} [rootElement] optional root element\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.createPlane = function(name, rootElement) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  if (this._planes[name]) {\n    throw new Error('plane ' + name + ' already exists');\n  }\n\n  if (!rootElement) {\n    rootElement = {\n      id: '__implicitroot' + name,\n      children: [],\n      isImplicit: true\n    };\n  }\n\n  var svgLayer = this.getLayer(name, PLANE_LAYER_INDEX);\n  svgClasses(svgLayer).add(HIDDEN_MARKER);\n\n  var plane = this._planes[name] = {\n    layer: svgLayer,\n    name: name,\n    rootElement: null\n  };\n\n  this.setRootElementForPlane(rootElement, plane);\n\n  return plane;\n};\n\n/**\n * Sets the active plane and hides the previously active plane.\n *\n * @param {string|Object} plane\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.setActivePlane = function(plane) {\n  if (!plane) {\n    throw new Error('must specify a plane');\n  }\n\n  if (typeof plane === 'string') {\n    plane = this.getPlane(plane);\n  }\n\n  // hide previous Plane\n  if (this._activePlane) {\n    svgClasses(this._activePlane.layer).add(HIDDEN_MARKER);\n  }\n\n  this._activePlane = plane;\n\n  // show current Plane\n  svgClasses(plane.layer).remove(HIDDEN_MARKER);\n\n  if (plane.rootElement) {\n    this._elementRegistry.updateGraphics(plane.rootElement, this._svg, true);\n  }\n\n  this._eventBus.fire('plane.set', { plane: plane });\n\n  return plane;\n};\n\n/**\n * Returns the currently active layer\n *\n * @returns {SVGElement}\n */\n\nCanvas.prototype.getActiveLayer = function() {\n  return this.getActivePlane().layer;\n};\n\n/**\n * Returns the currently active plane.\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.getActivePlane = function() {\n  var plane = this._activePlane;\n  if (!plane) {\n    plane = this.createPlane(BASE_LAYER);\n    this.setActivePlane(BASE_LAYER);\n  }\n\n  return plane;\n};\n\n/**\n * Returns the plane which contains the given element.\n *\n * @param {string|djs.model.Base} element\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.findPlane = function(element) {\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  var root = findRoot(element);\n\n  return find(this._planes, function(plane) {\n    return plane.rootElement === root;\n  });\n};\n\n/**\n * Returns the html element that encloses the\n * drawing canvas.\n *\n * @return {DOMNode}\n */\nCanvas.prototype.getContainer = function() {\n  return this._container;\n};\n\n\n// markers //////////////////////\n\nCanvas.prototype._updateMarker = function(element, marker, add) {\n  var container;\n\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  // we need to access all\n  container = this._elementRegistry._elements[element.id];\n\n  if (!container) {\n    return;\n  }\n\n  forEach([ container.gfx, container.secondaryGfx ], function(gfx) {\n    if (gfx) {\n\n      // invoke either addClass or removeClass based on mode\n      if (add) {\n        svgClasses(gfx).add(marker);\n      } else {\n        svgClasses(gfx).remove(marker);\n      }\n    }\n  });\n\n  /**\n   * An event indicating that a marker has been updated for an element\n   *\n   * @event element.marker.update\n   * @type {Object}\n   * @property {djs.model.Element} element the shape\n   * @property {Object} gfx the graphical representation of the shape\n   * @property {string} marker\n   * @property {boolean} add true if the marker was added, false if it got removed\n   */\n  this._eventBus.fire('element.marker.update', { element: element, gfx: container.gfx, marker: marker, add: !!add });\n};\n\n\n/**\n * Adds a marker to an element (basically a css class).\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @example\n * canvas.addMarker('foo', 'some-marker');\n *\n * var fooGfx = canvas.getGraphics('foo');\n *\n * fooGfx; // <g class=\"... some-marker\"> ... </g>\n *\n * @param {string|djs.model.Base} element\n * @param {string} marker\n */\nCanvas.prototype.addMarker = function(element, marker) {\n  this._updateMarker(element, marker, true);\n};\n\n\n/**\n * Remove a marker from an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.removeMarker = function(element, marker) {\n  this._updateMarker(element, marker, false);\n};\n\n/**\n * Check the existence of a marker on element.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.hasMarker = function(element, marker) {\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  var gfx = this.getGraphics(element);\n\n  return svgClasses(gfx).has(marker);\n};\n\n/**\n * Toggles a marker on an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.toggleMarker = function(element, marker) {\n  if (this.hasMarker(element, marker)) {\n    this.removeMarker(element, marker);\n  } else {\n    this.addMarker(element, marker);\n  }\n};\n\nCanvas.prototype.getRootElement = function() {\n  var plane = this.getActivePlane();\n\n  return plane.rootElement;\n};\n\n\n\n// root element handling //////////////////////\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} element\n * @param {boolean} [override] whether to override the current root element, if any\n *\n * @return {Object|djs.model.Root} new root element\n */\nCanvas.prototype.setRootElement = function(element, override) {\n  var activePlane = this._activePlane;\n\n  if (activePlane) {\n    return this.setRootElementForPlane(element, activePlane, override);\n  } else {\n    var basePlane = this.createPlane(BASE_LAYER, element);\n\n    this.setActivePlane(basePlane);\n\n    return basePlane.rootElement;\n  }\n};\n\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} element\n * @param {Object|djs.model.Root} plane\n * @param {boolean} [override] whether to override the current root element, if any\n *\n * @return {Object|djs.model.Root} new root element\n */\nCanvas.prototype.setRootElementForPlane = function(element, plane, override) {\n\n  if (typeof plane === 'string') {\n    plane = this.getPlane(plane);\n  }\n\n  if (element) {\n    this._ensureValid('root', element);\n  }\n\n  var currentRoot = plane.rootElement,\n      elementRegistry = this._elementRegistry,\n      eventBus = this._eventBus;\n\n  if (currentRoot) {\n    if (!override) {\n      throw new Error('rootElement already set, need to specify override');\n    }\n\n    // simulate element remove event sequence\n    eventBus.fire('root.remove', { element: currentRoot });\n    eventBus.fire('root.removed', { element: currentRoot });\n\n    elementRegistry.remove(currentRoot);\n  }\n\n  if (element) {\n    var gfx = plane.layer;\n\n    // resemble element add event sequence\n    eventBus.fire('root.add', { element: element });\n\n    elementRegistry.add(element, gfx);\n\n    eventBus.fire('root.added', { element: element, gfx: gfx });\n\n    // associate SVG with root element when active\n    if (plane === this._activePlane) {\n      this._elementRegistry.updateGraphics(element, this._svg, true);\n    }\n  }\n\n  plane.rootElement = element;\n\n  return element;\n};\n\n// add functionality //////////////////////\n\nCanvas.prototype._ensureValid = function(type, element) {\n  if (!element.id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elementRegistry.get(element.id)) {\n    throw new Error('element with id ' + element.id + ' already exists');\n  }\n\n  var requiredAttrs = REQUIRED_MODEL_ATTRS[type];\n\n  var valid = every(requiredAttrs, function(attr) {\n    return typeof element[attr] !== 'undefined';\n  });\n\n  if (!valid) {\n    throw new Error(\n      'must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);\n  }\n};\n\nCanvas.prototype._setParent = function(element, parent, parentIndex) {\n  collectionAdd(parent.children, element, parentIndex);\n  element.parent = parent;\n};\n\n/**\n * Adds an element to the canvas.\n *\n * This wires the parent <-> child relationship between the element and\n * a explicitly specified parent or an implicit root element.\n *\n * During add it emits the events\n *\n *  * <{type}.add> (element, parent)\n *  * <{type}.added> (element, gfx)\n *\n * Extensions may hook into these events to perform their magic.\n *\n * @param {string} type\n * @param {Object|djs.model.Base} element\n * @param {Object|djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {Object|djs.model.Base} the added element\n */\nCanvas.prototype._addElement = function(type, element, parent, parentIndex) {\n\n  parent = parent || this.getRootElement();\n\n  var eventBus = this._eventBus,\n      graphicsFactory = this._graphicsFactory;\n\n  this._ensureValid(type, element);\n\n  eventBus.fire(type + '.add', { element: element, parent: parent });\n\n  this._setParent(element, parent, parentIndex);\n\n  // create graphics\n  var gfx = graphicsFactory.create(type, element, parentIndex);\n\n  this._elementRegistry.add(element, gfx);\n\n  // update its visual\n  graphicsFactory.update(type, element, gfx);\n\n  eventBus.fire(type + '.added', { element: element, gfx: gfx });\n\n  return element;\n};\n\n/**\n * Adds a shape to the canvas\n *\n * @param {Object|djs.model.Shape} shape to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Shape} the added shape\n */\nCanvas.prototype.addShape = function(shape, parent, parentIndex) {\n  return this._addElement('shape', shape, parent, parentIndex);\n};\n\n/**\n * Adds a connection to the canvas\n *\n * @param {Object|djs.model.Connection} connection to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Connection} the added connection\n */\nCanvas.prototype.addConnection = function(connection, parent, parentIndex) {\n  return this._addElement('connection', connection, parent, parentIndex);\n};\n\n\n/**\n * Internal remove element\n */\nCanvas.prototype._removeElement = function(element, type) {\n\n  var elementRegistry = this._elementRegistry,\n      graphicsFactory = this._graphicsFactory,\n      eventBus = this._eventBus;\n\n  element = elementRegistry.get(element.id || element);\n\n  if (!element) {\n\n    // element was removed already\n    return;\n  }\n\n  eventBus.fire(type + '.remove', { element: element });\n\n  graphicsFactory.remove(element);\n\n  // unset parent <-> child relationship\n  collectionRemove(element.parent && element.parent.children, element);\n  element.parent = null;\n\n  eventBus.fire(type + '.removed', { element: element });\n\n  elementRegistry.remove(element);\n\n  return element;\n};\n\n\n/**\n * Removes a shape from the canvas\n *\n * @param {string|djs.model.Shape} shape or shape id to be removed\n *\n * @return {djs.model.Shape} the removed shape\n */\nCanvas.prototype.removeShape = function(shape) {\n\n  /**\n   * An event indicating that a shape is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.remove\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n\n  /**\n   * An event indicating that a shape has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.removed\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n  return this._removeElement(shape, 'shape');\n};\n\n\n/**\n * Removes a connection from the canvas\n *\n * @param {string|djs.model.Connection} connection or connection id to be removed\n *\n * @return {djs.model.Connection} the removed connection\n */\nCanvas.prototype.removeConnection = function(connection) {\n\n  /**\n   * An event indicating that a connection is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.remove\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n\n  /**\n   * An event indicating that a connection has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.removed\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n  return this._removeElement(connection, 'connection');\n};\n\n\n/**\n * Return the graphical object underlaying a certain diagram element\n *\n * @param {string|djs.model.Base} element descriptor of the element\n * @param {boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\nCanvas.prototype.getGraphics = function(element, secondary) {\n  return this._elementRegistry.getGraphics(element, secondary);\n};\n\n\n/**\n * Perform a viewbox update via a given change function.\n *\n * @param {Function} changeFn\n */\nCanvas.prototype._changeViewbox = function(changeFn) {\n\n  // notify others of the upcoming viewbox change\n  this._eventBus.fire('canvas.viewbox.changing');\n\n  // perform actual change\n  changeFn.apply(this);\n\n  // reset the cached viewbox so that\n  // a new get operation on viewbox or zoom\n  // triggers a viewbox re-computation\n  this._cachedViewbox = null;\n\n  // notify others of the change; this step\n  // may or may not be debounced\n  this._viewboxChanged();\n};\n\nCanvas.prototype._viewboxChanged = function() {\n  this._eventBus.fire('canvas.viewbox.changed', { viewbox: this.viewbox() });\n};\n\n\n/**\n * Gets or sets the view box of the canvas, i.e. the\n * area that is currently displayed.\n *\n * The getter may return a cached viewbox (if it is currently\n * changing). To force a recomputation, pass `false` as the first argument.\n *\n * @example\n *\n * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })\n *\n * // sets the visible area of the diagram to (100|100) -> (600|100)\n * // and and scales it according to the diagram width\n *\n * var viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.\n *\n * console.log(viewbox);\n * // {\n * //   inner: Dimensions,\n * //   outer: Dimensions,\n * //   scale,\n * //   x, y,\n * //   width, height\n * // }\n *\n * // if the current diagram is zoomed and scrolled, you may reset it to the\n * // default zoom via this method, too:\n *\n * var zoomedAndScrolledViewbox = canvas.viewbox();\n *\n * canvas.viewbox({\n *   x: 0,\n *   y: 0,\n *   width: zoomedAndScrolledViewbox.outer.width,\n *   height: zoomedAndScrolledViewbox.outer.height\n * });\n *\n * @param  {Object} [box] the new view box to set\n * @param  {number} box.x the top left X coordinate of the canvas visible in view box\n * @param  {number} box.y the top left Y coordinate of the canvas visible in view box\n * @param  {number} box.width the visible width\n * @param  {number} box.height\n *\n * @return {Object} the current view box\n */\nCanvas.prototype.viewbox = function(box) {\n\n  if (box === undefined && this._cachedViewbox) {\n    return this._cachedViewbox;\n  }\n\n  var viewport = this._viewport,\n      innerBox,\n      outerBox = this.getSize(),\n      matrix,\n      transform,\n      scale,\n      x, y;\n\n  if (!box) {\n\n    // compute the inner box based on the\n    // diagrams active plane. This allows us to exclude\n    // external components, such as overlays\n\n    innerBox = (this._activePlane && this._activePlane.layer.getBBox()) || {};\n\n    transform = svgTransform(viewport);\n    matrix = transform ? transform.matrix : createMatrix();\n    scale = round(matrix.a, 1000);\n\n    x = round(-matrix.e || 0, 1000);\n    y = round(-matrix.f || 0, 1000);\n\n    box = this._cachedViewbox = {\n      x: x ? x / scale : 0,\n      y: y ? y / scale : 0,\n      width: outerBox.width / scale,\n      height: outerBox.height / scale,\n      scale: scale,\n      inner: {\n        width: innerBox.width || 0,\n        height: innerBox.height || 0,\n        x: innerBox.x || 0,\n        y: innerBox.y || 0\n      },\n      outer: outerBox\n    };\n\n    return box;\n  } else {\n\n    this._changeViewbox(function() {\n      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);\n\n      var matrix = this._svg.createSVGMatrix()\n        .scale(scale)\n        .translate(-box.x, -box.y);\n\n      svgTransform(viewport, matrix);\n    });\n  }\n\n  return box;\n};\n\n\n/**\n * Gets or sets the scroll of the canvas.\n *\n * @param {Object} [delta] the new scroll to apply.\n *\n * @param {number} [delta.dx]\n * @param {number} [delta.dy]\n */\nCanvas.prototype.scroll = function(delta) {\n\n  var node = this._viewport;\n  var matrix = node.getCTM();\n\n  if (delta) {\n    this._changeViewbox(function() {\n      delta = assign({ dx: 0, dy: 0 }, delta || {});\n\n      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);\n\n      setCTM(node, matrix);\n    });\n  }\n\n  return { x: matrix.e, y: matrix.f };\n};\n\n/**\n * Scrolls the viewbox to contain the given element.\n * Optionally specify a padding to be applied to the edges.\n *\n * @param {Object|String} [element] the element to scroll to.\n * @param {Object|Number} [padding=100] the padding to be applied. Can also specify top, bottom, left and right.\n *\n */\nCanvas.prototype.scrollToElement = function(element, padding) {\n  var defaultPadding = 100;\n\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  // switch to correct Plane\n  var targetPlane = this.findPlane(element);\n  if (targetPlane !== this._activePlane) {\n    this.setActivePlane(targetPlane);\n  }\n\n  if (!padding) {\n    padding = {};\n  }\n  if (typeof padding === 'number') {\n    defaultPadding = padding;\n  }\n\n  padding = {\n    top: padding.top || defaultPadding,\n    right: padding.right || defaultPadding,\n    bottom: padding.bottom || defaultPadding,\n    left: padding.left || defaultPadding\n  };\n\n  var elementBounds = getBoundingBox(element),\n      elementTrbl = asTRBL(elementBounds),\n      viewboxBounds = this.viewbox(),\n      zoom = this.zoom(),\n      dx, dy;\n\n  // shrink viewboxBounds with padding\n  viewboxBounds.y += padding.top / zoom;\n  viewboxBounds.x += padding.left / zoom;\n  viewboxBounds.width -= (padding.right + padding.left) / zoom;\n  viewboxBounds.height -= (padding.bottom + padding.top) / zoom;\n\n  var viewboxTrbl = asTRBL(viewboxBounds);\n\n  var canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;\n\n  if (!canFit) {\n\n    // top-left when element can't fit\n    dx = elementBounds.x - viewboxBounds.x;\n    dy = elementBounds.y - viewboxBounds.y;\n\n  } else {\n\n    var dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right),\n        dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left),\n        dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom),\n        dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);\n\n    dx = dRight || dLeft;\n    dy = dBottom || dTop;\n\n  }\n\n  this.scroll({ dx: -dx * zoom, dy: -dy * zoom });\n};\n\n/**\n * Gets or sets the current zoom of the canvas, optionally zooming\n * to the specified position.\n *\n * The getter may return a cached zoom level. Call it with `false` as\n * the first argument to force recomputation of the current level.\n *\n * @param {string|number} [newScale] the new zoom level, either a number, i.e. 0.9,\n *                                   or `fit-viewport` to adjust the size to fit the current viewport\n * @param {string|Point} [center] the reference point { x: .., y: ..} to zoom to, 'auto' to zoom into mid or null\n *\n * @return {number} the current scale\n */\nCanvas.prototype.zoom = function(newScale, center) {\n\n  if (!newScale) {\n    return this.viewbox(newScale).scale;\n  }\n\n  if (newScale === 'fit-viewport') {\n    return this._fitViewport(center);\n  }\n\n  var outer,\n      matrix;\n\n  this._changeViewbox(function() {\n\n    if (typeof center !== 'object') {\n      outer = this.viewbox().outer;\n\n      center = {\n        x: outer.width / 2,\n        y: outer.height / 2\n      };\n    }\n\n    matrix = this._setZoom(newScale, center);\n  });\n\n  return round(matrix.a, 1000);\n};\n\nfunction setCTM(node, m) {\n  var mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n  node.setAttribute('transform', mstr);\n}\n\nCanvas.prototype._fitViewport = function(center) {\n\n  var vbox = this.viewbox(),\n      outer = vbox.outer,\n      inner = vbox.inner,\n      newScale,\n      newViewbox;\n\n  // display the complete diagram without zooming in.\n  // instead of relying on internal zoom, we perform a\n  // hard reset on the canvas viewbox to realize this\n  //\n  // if diagram does not need to be zoomed in, we focus it around\n  // the diagram origin instead\n\n  if (inner.x >= 0 &&\n      inner.y >= 0 &&\n      inner.x + inner.width <= outer.width &&\n      inner.y + inner.height <= outer.height &&\n      !center) {\n\n    newViewbox = {\n      x: 0,\n      y: 0,\n      width: Math.max(inner.width + inner.x, outer.width),\n      height: Math.max(inner.height + inner.y, outer.height)\n    };\n  } else {\n\n    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);\n    newViewbox = {\n      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),\n      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),\n      width: outer.width / newScale,\n      height: outer.height / newScale\n    };\n  }\n\n  this.viewbox(newViewbox);\n\n  return this.viewbox(false).scale;\n};\n\n\nCanvas.prototype._setZoom = function(scale, center) {\n\n  var svg = this._svg,\n      viewport = this._viewport;\n\n  var matrix = svg.createSVGMatrix();\n  var point = svg.createSVGPoint();\n\n  var centerPoint,\n      originalPoint,\n      currentMatrix,\n      scaleMatrix,\n      newMatrix;\n\n  currentMatrix = viewport.getCTM();\n\n  var currentScale = currentMatrix.a;\n\n  if (center) {\n    centerPoint = assign(point, center);\n\n    // revert applied viewport transformations\n    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());\n\n    // create scale matrix\n    scaleMatrix = matrix\n      .translate(originalPoint.x, originalPoint.y)\n      .scale(1 / currentScale * scale)\n      .translate(-originalPoint.x, -originalPoint.y);\n\n    newMatrix = currentMatrix.multiply(scaleMatrix);\n  } else {\n    newMatrix = matrix.scale(scale);\n  }\n\n  setCTM(this._viewport, newMatrix);\n\n  return newMatrix;\n};\n\n\n/**\n * Returns the size of the canvas\n *\n * @return {Dimensions}\n */\nCanvas.prototype.getSize = function() {\n  return {\n    width: this._container.clientWidth,\n    height: this._container.clientHeight\n  };\n};\n\n\n/**\n * Return the absolute bounding box for the given element\n *\n * The absolute bounding box may be used to display overlays in the\n * callers (browser) coordinate system rather than the zoomed in/out\n * canvas coordinates.\n *\n * @param  {ElementDescriptor} element\n * @return {Bounds} the absolute bounding box\n */\nCanvas.prototype.getAbsoluteBBox = function(element) {\n  var vbox = this.viewbox();\n  var bbox;\n\n  // connection\n  // use svg bbox\n  if (element.waypoints) {\n    var gfx = this.getGraphics(element);\n\n    bbox = gfx.getBBox();\n  }\n\n  // shapes\n  // use data\n  else {\n    bbox = element;\n  }\n\n  var x = bbox.x * vbox.scale - vbox.x * vbox.scale;\n  var y = bbox.y * vbox.scale - vbox.y * vbox.scale;\n\n  var width = bbox.width * vbox.scale;\n  var height = bbox.height * vbox.scale;\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n\n/**\n * Fires an event in order other modules can react to the\n * canvas resizing\n */\nCanvas.prototype.resized = function() {\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n\n  this._eventBus.fire('canvas.resized');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}